const allArticles = [
    {
        "slug": "accessibility",
        "content": "<p>So let's say you’re browsing the web, reading articles on the latest news. An article catches your eye so you open the page to read it. You love the article, so much so that you decided to share it with your good friend.</p>\n<p>You send it over but a thought keeps lingering in your head: \"my friend is blind, how is she going to read the article?\" Nevertheless, she sends back that she loved the article and said thank you. But how?</p>\n<p>Reading for you is a visual experience. You see the letters as you read through articles. How does your friend do it?</p>\n<p>The reason your friend can read articles is because she has a piece of software on her computer which reads webpages aloud to her, and the developers of the website have made sure the content is read by the software correctly.</p>\n<p>In other words, the developers built the website with <em>accessibility</em> in mind.</p>\n<p>Web Accessibility is the practice of being inclusive to all your users, including those who don’t experience the web the same way you do. Considering the experience of visually impaired users is only one aspect of accessibility</p>\n<p>Consider this: you’re watching a video on YouTube and found it funny so you decide to send it to a friend who is deaf. How will he be able to enjoy the video, since for you, watching a video is an audiovisual experience?</p>\n<p>If you thought of subtitles then you’re right. Video creators with accessibility in mind, include closed caption subtitles for their hearing impaired viewers.</p>\n<p>Of course there's more to it:</p>\n<ul>\n<li><p>Making sure the colours of text and their background have sufficient contrast for visual impaired users</p></li>\n<li><p>Reduce unnecessary transitions and animations for visitors with vestibular motion disorders</p></li>\n</ul>\n<p>So what simple things can you do to be more inclusive in your projects?</p>\n<ul>\n<li><p>Use semantic HTML like <code>&lt;header&gt;</code>, <code>&lt;nav&gt;</code> and <code>&lt;main&gt;</code> instead of just <code>&lt;div&gt;</code>s</p></li>\n<li><p>Include labels in your images so screen readers can describe them to their users</p></li>\n<li><p>Make sure text and its background has sufficient contrast</p></li>\n<li><p>Reduce unnecessary animation, transitions and unexpected behaviour as much as possible.</p></li>\n</ul>\n<p>Being accessible should be at the core of your development, not just an additional feature as an afterthought.</p>\n<p>To learn more visit these links:</p>\n<ul>\n<li><p>A11y Project</p></li>\n<li><p>MDN - Accessibility</p></li>\n</ul>",
        "series": "explained",
        "title": "Accessibility, explained.",
        "publishDate": "2021/03/23 16:33",
        "thumbnail": "a11y.png"
    },
    {
        "slug": "api",
        "content": "<p>What is API?</p>\n<h2 id=\"letsexplain\">Let's explain!</h2>\n<p>So a friend comes up to you and says </p>\n<blockquote>\n  <p>\"I heard you create websites. Can you make me one?\"</p>\n</blockquote>\n<p>You, being a good friend, happily agree. You agree on the details and you get cracking with the website…</p>\n<p>After a month or so, you complete the work. You show the website to your friend.</p>\n<p>Your friend is mindblown! His pupils dilate at the site of his new amazing website that you have built for him.</p>\n<p>You have the feeling of pride that your creation has made your close friend happy</p>\n<p>After a few days, you get a phone call from your friend:</p>\n<blockquote>\n  <p>\"Hey! Remember you made a website for me? It's great! But I have a Twitter account, and I was wondering if you could add the number of followers at the top right?\"</p>\n</blockquote>\n<p>You think it's a great idea so you agree to do it!</p>\n<p>Thing is, how are you going to grab the number of followers and add it to his website?</p>\n<p>You put your brain to work on possible ways…</p>\n<p>Should you hardcode the number of followers to the website?</p>\n<p>Sure that could work, BUT…</p>\n<p>Are you willing to constantly get to the website's code and change that number? </p>\n<p>No? Then that's probably not the answer…</p>\n<p>Should you somehow automatically go to your friend's Twitter profile regularly, grab the follower count and put in on the website?</p>\n<p>Sure that's a viable option. But it's an unstable solution that will become useless once Twitter decides to change to their website.</p>\n<p>You need to somehow have Twitter send this information to you in a reliable way.</p>\n<p>Thankfully, Twitter has a functionality to easily get and post information such as tweets, followers and other useful stuff.</p>\n<p>Such a tool is called an <em>API (Application Programming Interface)</em>!</p>\n<p>So you read through the documentation of the Twitter API and sure enough, there's a easy way to grab the follower count of your friend's account with just a URL. </p>\n<p>So you set up a scheduled process which grabs the follower count and adds it to your friend's website.</p>\n<p>Finally you show this to your friend and once again, he is happier than ever! </p>\n<p>A job well done!</p>\n<p>APIs are basically a façade programmers can use to make accessing a complex system easier.</p>\n<p>APIs are tools used by almost all popular websites. Here are some examples:</p>\n<ul>\n<li><p><a href=\"https://developer.twitter.com/\">Twitter API</a></p></li>\n<li><p><a href=\"https://developers.facebook.com/\">Facebook / Instagram / WhatsApp</a></p></li>\n<li><p><a href=\"https://docs.github.com/en/rest\">Github</a></p></li>\n</ul>\n<p>I hope this article made API a little easier to understand. Thank you for reading! 👋👋👋</p>",
        "series": "explained",
        "title": "API, explained.",
        "publishDate": "2021/07/14 12:00",
        "thumbnail": "api.png",
        "description": "An introduction to Application Programming Interface (API)",
        "keywords": [
            "api",
            "web development",
            "application programming interface",
            "twitter api"
        ],
        "twitterimage": "https://savvas.me/assets/api-tw.png"
    },
    {
        "slug": "aria-label",
        "content": "<p>What is <code>aria-label</code> is accessibility?</p>\n<h2 id=\"letsexplain\">Let's explain</h2>\n<p>Suppose in your website you have a button:</p>\n<pre><code class=\"html language-html\">&lt;button&gt;&lt;/button&gt;\n</code></pre>\n<p>This button appears when there's a popup window and its job is to close that window:</p>\n<pre><code class=\"html language-html\">&lt;button onclick=\"closeWindow()\"&gt;&lt;/button&gt;\n</code></pre>\n<p>To make the button as minimal as possible, you decide to give it a label \"X\", instead of \"Close\":</p>\n<pre><code class=\"html language-html\">&lt;button onclick=\"closeWindow()\"&gt;X&lt;/button&gt;\n</code></pre>\n<p>So the button will look like this:</p>\n<p><img src=\"/assets/closebutton1.png\" alt=\"The close button in the website\" /></p>\n<p>Although the button looks nice, there's a problem.</p>\n<p>A screen reader will announce the label of the button as is. So once the button has the focus, the screen reader will say:</p>\n<blockquote>\n  <p>Cap X, button</p>\n</blockquote>\n<p>That doesn't really give an very good picture of what the button is supposed to do to the screen reader user. We need a clearer label, but at the same time, keep the \"X\" as our label.</p>\n<p>What can we do?</p>\n<p>We can use an attribute in our HTML, called <code>aria-label</code>.</p>\n<p>This is how it can be used in our button:</p>\n<pre><code class=\"html language-html\">&lt;button onclick=\"closeWindow()\" aria-label=\"Close window\"&gt;X&lt;/button&gt;\n</code></pre>\n<p>So now the button will be announced like this:</p>\n<blockquote>\n  <p>Close window, button</p>\n</blockquote>\n<p>In conclusion, if you need a screen reader to announce an element separately than its actual label, use <code>aria-label</code>.</p>\n<p>To learn more see <a href=\"https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/ARIA_Techniques/Using_the_aria-label_attribute\">this page on MDN</a></p>",
        "series": "explained",
        "title": "aria-label in accessibility, explained.",
        "publishDate": "2021/08/18 08:47",
        "thumbnail": "arialabel.png",
        "description": "An explanation of the aria-label attribute in accessibility",
        "keywords": [
            "accessibility",
            "aria",
            "aria-label",
            "web development",
            "javascript",
            "hoisting",
            "explained"
        ],
        "twitterimage": "https://savvas.me/assets/arialabel-tw.png"
    },
    {
        "slug": "aria-roles",
        "content": "<p>What are ARIA \"roles\" and how can they make your website more accessible?</p>\n<h2 id=\"letsexplain\">Let's explain.</h2>\n<p>Let's suppose you have a website. On this website you have simple form where your users can subscribe to your newsletter using their email address:</p>\n<p><img src=\"/assets/simple-form.png\" alt=\"\" /></p>\n<p>The form is quite simple and straightforward:</p>\n<ul>\n<li>A label for the email input box</li>\n<li>The email input box</li>\n<li>A submit button</li>\n</ul>\n<p>For the label you use the <code>&lt;label&gt;</code> tag. For the input box you use <code>&lt;input&gt;</code>. All within a <code>&lt;form&gt;</code> tag:</p>\n<pre><code class=\"html language-html\">&lt;form&gt;\n  &lt;label for=\"email\"&gt;Email: &lt;/label&gt;\n  &lt;input type=\"text\" id=\"email\" id=\"email\"/&gt;\n&lt;/form&gt;\n</code></pre>\n<p>For the button however, for various reasons, instead of using the <code>&lt;button&gt;</code> tag, you decide to create a <code>&lt;span&gt;</code> instead:</p>\n<pre><code class=\"html language-html\">&lt;form&gt;\n  &lt;label for=\"email\"&gt;Email: &lt;/label&gt;\n  &lt;input type=\"text\" id=\"email\" id=\"email\"/&gt;\n\n  &lt;span onclick=\"submitForm()\"&gt;Submit&lt;/span&gt;\n&lt;/form&gt;\n</code></pre>\n<p>You style the span to look like a button. You add some code which makes it act like a button. But there's a problem:</p>\n<p>Semantically, it's not a button. A screen reader, for example, won't be able to know that this actually a button…</p>\n<p>…unless you specifically tell it so.</p>\n<p>You can turn your span into a semantic button by using an ARIA <code>role</code> attribute.</p>\n<p>So to turn our span into a button, we add <code>role=\"button\"</code> as an attribute:</p>\n<pre><code class=\"diff language-diff\">&lt;form&gt;\n  &lt;label for=\"email\"&gt;Email: &lt;/label&gt;\n  &lt;input type=\"text\" id=\"email\" id=\"email\"/&gt;\n\n-  &lt;span onclick=\"submitForm()\"&gt;Submit&lt;/span&gt;\n+  &lt;span onclick=\"submitForm()\" role=\"button\"&gt;Submit&lt;/span&gt;\n&lt;/form&gt;\n</code></pre>\n<p>Now the screen reader knows that this acts like a button which is supposed to do something, and it will announce it as such.</p>\n<p>But how about keyboard access? Spans aren't focusable by default so we need to include <code>tabindex</code> to our span:</p>\n<pre><code class=\"diff language-diff\">&lt;form&gt;\n  &lt;label for=\"email\"&gt;Email: &lt;/label&gt;\n  &lt;input type=\"text\" id=\"email\" id=\"email\"/&gt;\n\n-  &lt;span onclick=\"submitForm()\" role=\"button\"&gt;Submit&lt;/span&gt;\n+  &lt;span onclick=\"submitForm()\" role=\"button\" tabindex=\"0\"&gt;Submit&lt;/span&gt;\n&lt;/form&gt;\n</code></pre>\n<p>That's it. We now have a custom element that looks, acts and is semantically a button.</p>\n<p><code>button</code> is just an example of the many ARIA roles that exist out there.</p>\n<p>Examples:</p>\n<ul>\n<li><p><code>alert</code>: used to signify that this element is dynamically updated.</p></li>\n<li><p><code>dialog</code>: used to signify that this element is a dialog, usually displayed on top of the rest of the page.</p></li>\n</ul>\n<p>And that's it. Thanks for reading. Which ARIA roles do you frequently use and why? Let me know on Twitter!</p>",
        "series": "explained",
        "title": "ARIA roles, explained.",
        "publishDate": "2021/07/29 14:00",
        "thumbnail": "a11y.png",
        "description": "What ARIA roles are in accessibility",
        "keywords": [
            "html",
            "accessibility",
            "aria roles",
            "button",
            "aria"
        ],
        "twitterimage": "https://savvas.me/assets/aria-tw.png"
    },
    {
        "slug": "arrays",
        "content": "<p>What are <em>ARRAYS</em> in programming?</p>\n<h2 id=\"letsexplain\">Let's explain.</h2>\n<p>Arrays in programming are essentially ways of storing lists of things in a program or app.</p>\n<p>The way to store these lists, will depend on the programming language you use.</p>\n<p>So, suppose you need to make a list of things to buy.</p>\n<p>What you would usually do is take out a piece of paper from a notebook and write everything you need to buy.</p>\n<p>You decide there's a better way. Make a program on your computer instead!</p>\n<p>So how would you store this list?</p>\n<p>We've talked about variables before. Basically a way to store things that would be used later.</p>\n<p><a href=\"/explained/variables\">More on variables here</a></p>\n<p>Same way we store text or numbers, we can store lists of text or numbers.</p>\n<p>In our case, we want to store a list of items to buy. That means we need a text list!</p>\n<p>In Javascript, for example, this is how we store links:</p>\n<pre><code class=\"js language-js\">let stuffToBuy = [\"Milk\", \"Orange juice\", \"A laptop for coding\"]\n</code></pre>\n<p>In Python, it's similar:</p>\n<pre><code class=\"python language-python\">stuffToBuy = [\"Milk\", \"Orange juice\", \"A laptop for coding\"]\n</code></pre>\n<p>Now you can do stuff like, select a specific item in the list, depending on its position:</p>\n<pre><code class=\"js language-js\">stuffToBuy[1]\n\n// ==&gt; Orange juice\n</code></pre>\n<p>Add (push) stuff to your list:</p>\n<pre><code class=\"js language-js\">stuffToBuy.push(\"Cheese\")\n</code></pre>\n<p>Check how large a list is:</p>\n<pre><code class=\"js language-js\">let stuffToBuy = [\"Milk\", \"Orange juice\", \"A laptop for coding\"]\nstuffToBuy.length\n// 3\n</code></pre>\n<p>Or go through each and every element in the list and so something specific with it.</p>\n<p>This is called a \"loop\" and it's something we'll talk about in another thread, so watch this space.</p>\n<p>Thank you for reading!</p>",
        "series": "explained",
        "title": "Arrays, explained.",
        "publishDate": "2021/09/09 12:00",
        "thumbnail": "arrays.png",
        "description": "An introduction to arrays in programming",
        "keywords": [
            "programming",
            "arrays",
            "basics",
            "beginner"
        ],
        "twitterimage": "https://savvas.me/assets/arrays-tw.png"
    },
    {
        "slug": "async-await",
        "content": "<h2 id=\"introduction\">Introduction</h2>\n<p><a href=\"/explained/promises\">So as we mentioned before</a>, Promises are a way of telling Javascript, \"go fetch some data but I'm not going to sit and wait because my browser would freeze. When you <em>DO</em> get a response eventually, do <em>THIS</em> with the data\":</p>\n<p>For example:</p>\n<pre><code class=\"js language-js\">getData(\"http://api.example.com/data\")\n    .then((response) =&gt; {\n        console.log(response)\n    })\n</code></pre>\n<p>What the code basically does is:</p>\n<ul>\n<li>request the data</li>\n<li><em>when the data is received</em> print them to the console</li>\n</ul>\n<h2 id=\"nowimaginethisscenario\">Now imagine this scenario:</h2>\n<ul>\n<li>You need to make an API call to get user details</li>\n<li>You then need to extract the User ID from the details</li>\n<li>Then you need to make another API call to get user records using the User ID you got from the first API call</li>\n</ul>\n<p>To accomplish this, you will need to call a Promise within a Promise:</p>\n<pre><code class=\"js language-js\">getData(\"http://api.example.com/get-user-details\")\n    .then((userDetails) =&gt; {\n        getData(\"http://api.example.com/records/\" + userDetails.id)\n            .then((recordsById) =&gt; {\n                console.log(recordsById)\n            })\n    })\n</code></pre>\n<p>You can see how this can become messy. What if you need to do 3 API calls? Or 4? Or more? It will become a nightmare to maintain! Take a look at this:</p>\n<pre><code class=\"js language-js\">getData(\"http://api.example.com/get-user-details\")\n    .then((userDetails) =&gt; {\n        getData(\"http://api.example.com/records/\" + userDetails.id)\n            .then((recordsById) =&gt; {\n                post(\"http://api.example.com/save\", {records: recordsById})\n                    .then((response) =&gt; console.log(response))\n        })\n    })\n</code></pre>\n<p>🤷\u200d♂️ Is there a better way to do this? A cleaner, less messy way that doesn't involve nesting promises within promises within promises?</p>\n<p>Yes there is. 👍</p>\n<h2 id=\"enterasyncandawait\">Enter: async and await!</h2>\n<p><code>async</code>/<code>await</code> is a way to tell the browser, \"please sit and wait for data to return before proceeding to the next line (like how other programming languages do it), <strong>BUT DO NOT WORRY!</strong> I will <em>STILL</em> return a Promise at the end of all this so you won't freeze!\"</p>\n<p>How do we use this? </p>\n<h3 id=\"step1tellthebrowseryourfunctionwillbereturningapromise\">Step 1. Tell the browser your function <em>will</em> be returning a Promise</h3>\n<p>First we want to make a commitment that this whole thing will return a Promise. This is what <code>async</code> does. It declares a function as \"asynchronous\", basically meaning that it will return a Promise.</p>\n<p>This is how it's done:</p>\n<pre><code class=\"js language-js\">async function stuffWithData(){\n\n}\n</code></pre>\n<p>No matter what you return here, it will be returned as a Promise.</p>\n<h3 id=\"step2makeyourbrowserwaitforresponses\">Step 2. Make your browser wait for responses</h3>\n<p>Now we can tell this function, \"whenever you request data, sit and wait for a response before proceeding to the next line. And we do this with the <code>await</code> keyword.</p>\n<p>Example:</p>\n<pre><code class=\"js language-js\">async function stuffWithData(){\n    console.log(\"Getting user details...\")\n    var userDetails = await getData(\"http://api.example.com/get-user-details\")\n    console.log(\"All done!\")\n    return userDetails\n}\n</code></pre>\n<p>What the code above does:</p>\n<ul>\n<li>It prints \"Getting user details…\" in the console</li>\n<li>Requests some data and <em>awaits</em> for them to be returned</li>\n<li>Saves the response in the <code>userDetails</code> variable</li>\n<li>Once this is done, print \"All done!\" to the console.</li>\n<li>Return the contents of <code>userDetails</code></li>\n</ul>\n<h3 id=\"hangonaminute\">Hang on a minute…</h3>\n<p><em>\"But\"</em>, I hear you ask, <em>\"didn't we say that sitting and waiting for data to be received will freeze my browser? What's going on here?\"</em></p>\n<p>In this case, <strong>NO!</strong> Why? Because we used <code>async</code> at the beginning of our function, the function can only return a Promise at the end, which in this case contains the contents of <code>userDetails</code> as a response. That means your browser is safe from freezing! 🙌</p>\n<p>With <code>async</code>/<code>await</code>, this is what your code now looks like: </p>\n<pre><code class=\"js language-js\">async function stuffWithData(){\n    var userDetails = await getData(\"http://api.example.com/get-user-details\")\n    var recordsById = await getData(\"http://api.example.com/records/\" + userDetails.id)\n    var response = await post(\"http://api.example.com/save\", {records: recordsById})\n    return response\n}\n</code></pre>\n<p>Compare this with the previous code. Much less messy right?</p>\n<p>Because this function returns a Promise, you'll need to call it the usual way to get the response:</p>\n<pre><code class=\"js language-js\">stuffWithData()\n    .then((response) =&gt; {\n        console.log(response)\n    })\n</code></pre>\n<p>And this is what makes <code>async</code>/<code>await</code> so great and so friendly to both the browser, the user and the developer!</p>\n<p>Happy browser 💻</p>\n<p>Happy user 💁\u200d♂️</p>\n<p>Happy developer! 👨\u200d💻</p>\n<p>Thank you for reading. I hope this made async/await a little clearer!</p>",
        "series": "explained",
        "title": "async/await, explained.",
        "publishDate": "2021/05/14 08:00",
        "thumbnail": "await.png"
    },
    {
        "slug": "callback",
        "content": "<p>Javascript has a ton of features that make programming great.</p>\n<p>One of them is functions.</p>\n<p>The idea is to put lots of lines of code into a single block and call them with a single line as often as you like.</p>\n<p>Example:</p>\n<pre><code class=\"js language-js\">function doStuff(){\n    doSomething()\n    doSomethingElse()\n    doOneMoreThing()\n}\n</code></pre>\n<p>With functions you can specify a few things that will be used within it while running:</p>\n<p>Like numbers:</p>\n<pre><code class=\"js language-js\">function doStuff(number){\n    doSomething()\n    doSomethingElse()\n    if(number === 1){\n        // only run this if number = 1\n        doOneMoreThing()\n    }   \n}\n</code></pre>\n<p>Or text:</p>\n<pre><code class=\"js language-js\">function sayHi(name){\n    console.log(`Hello ${name}`)\n}\n</code></pre>\n<p>Which you can then run by calling it:</p>\n<pre><code class=\"js language-js\">sayHi(\"Savvas\")\n//&gt; prints \"Hello Savvas\" to the console\n</code></pre>\n<p>Now let's suppose your function's purpose is to grab some data and once they arrive, do something specific with them.</p>\n<p>You'll need to tell the function: Get some data, but when you do run another function. A different function for different occasions I run the function.</p>\n<p>How can we do this? We'll need to give a function to our function and tell it to run it.</p>\n<p>What do we mean by that?</p>\n<p>If you've ever tried to grab some data in Javascript using fetch() or axios() it would look something like this:</p>\n<pre><code class=\"js language-js\">printResponse(data){\n    console.log(data)\n}\n\naxios.get(\"https://somedata.com\")\n    .then(printResponse)\n</code></pre>\n<p>What's happening?</p>\n<p>When you call <code>axios.get()</code>, it gives back a \"promise\", basically something that says \"I'll give you back a response in a bit, but not straight away\".</p>\n<p>It has a function called then(). If you noticed, we gave it another function called <code>printResponse()</code>.</p>\n<p>What we're doing here is basically telling Javascript:</p>\n<p>\"Go fetch some data and when you do, run this function I gave you using the data you get back\".</p>\n<p>That function is called the CALLBACK function.</p>\n<p>Simply put, a callback function is just a function called within another function.</p>\n<p>The most common usage is when some data needs to be fetched and something needs to be done with that data once it arrives.</p>\n<p>Like in Promises.</p>\n<p>And that's it! That's what callback functions are in Javascript.</p>\n<p>I hope this made sense. I'll link some additional stuff to read on.</p>\n<p>Thanks for reading! 👋👋👋</p>\n<p>[1] https://developer.mozilla.org/en-US/docs/Glossary/Callback_function</p>\n<p>[2] https://www.w3schools.com/js/js_callback.asp</p>\n<p>[3] https://en.wikipedia.org/wiki/Callback<em>(computer</em>programming)</p>",
        "series": "explained",
        "title": "Javascript Callback functions, explained.",
        "publishDate": "2022/01/06 14:00",
        "thumbnail": "callback.png",
        "description": "Callback functions in Javascript, explained.",
        "keywords": [
            "javascript",
            "promises",
            "callback functions"
        ],
        "twitterimage": "https://savvas.me/assets/callback-tw.png"
    },
    {
        "slug": "css-box-model",
        "content": "<p>This is a website:</p>\n<p><img src=\"/assets/box01.png\" alt=\"Screenshot of a simple website with a title, two paragraphs and a link\" /></p>\n<p>This simple website has these elements:</p>\n<ul>\n<li>A title</li>\n<li>Two paragraphs</li>\n<li>A link in the first paragraph.</li>\n</ul>\n<p>It's fair to say that each of these elements lives in its own little space, with its own little borders. It's also safe to say that these boundaries are shaped like squares.</p>\n<p><img src=\"/assets/box02.png\" alt=\"\" /></p>\n<p>These boxes aren't there just to put stuff on a page. The boxes the elements are in, are also used to style each element with CSS.</p>\n<p>Let's focus for a minute, on a single paragraph.</p>\n<p><img src=\"/assets/box03.png\" alt=\"\" /></p>\n<p>Styling happens in various parts of the element's borders:</p>\n<p>The content of the element…</p>\n<p><img src=\"/assets/box04.png\" alt=\"\" /></p>\n<p>The space within the border…</p>\n<p><img src=\"/assets/box05.png\" alt=\"\" /></p>\n<p>The border itself that wraps the content and the space inside it…</p>\n<p><img src=\"/assets/box06.png\" alt=\"\" /></p>\n<p>And the space <em>outside</em> the border</p>\n<p><img src=\"/assets/box07.png\" alt=\"\" /></p>\n<p>All these parts together make up an element's <em>box</em>.</p>\n<p>This is why the way the layout and styling of an element within a box is called <em>The Box Model</em>.</p>\n<h2 id=\"theboxmodel\">The Box Model</h2>\n<p>Everything I've mentioned above is part of an element's <strong>box</strong>. </p>\n<p><img src=\"/assets/box08.png\" alt=\"\" /></p>\n<ol>\n<li><p><strong>Content</strong>: the element's content. Usually text or other elements within it</p></li>\n<li><p><strong>Padding</strong>: the area around the content but within the borders of the element.</p></li>\n<li><p><strong>Border</strong>: The border mark itself.</p></li>\n<li><p><strong>Margin</strong>: The area outside the border mark.</p></li>\n</ol>\n<p>All these parts can be styled individually, so let's see use some CSS to do that for each one.</p>\n<p>Let's start with some basic HTML of a basic element:</p>\n<pre><code class=\"html language-html\">&lt;p id=\"my-element\"&gt;\nThis is the content\n&lt;/p&gt;\n</code></pre>\n<p><img src=\"/assets/box09.png\" alt=\"\" /></p>\n<h3 id=\"stylingthecontent\">Styling the content</h3>\n<p>The content in an element can be anything, but in our example our element only has some text in it, for simplicity. Let's style our text to give it a red color and make it slightly bigger:</p>\n<pre><code class=\"css language-css\">#my-element{\n    color: red;\n    font-size: 30px;\n}\n</code></pre>\n<p><img src=\"/assets/box10.png\" alt=\"\" /></p>\n<h3 id=\"stylingthepadding\">Styling the padding</h3>\n<p>Next, let's style the area around the content. Let's increase the padding to 30 pixels and change its background colour to a light grey:</p>\n<pre><code class=\"css language-css\">#my-element{\n    padding: 30px;\n    background-color: lightgrey;\n}\n</code></pre>\n<p><img src=\"/assets/box11.png\" alt=\"\" /></p>\n<h3 id=\"stylingtheborder\">Styling the border</h3>\n<p>Now, let's style the border of the element. Let's give it a size of 21 pixels and make its color black:</p>\n<pre><code class=\"css language-css\">#my-element{\n    border: 21px solid black;\n}\n</code></pre>\n<p><img src=\"/assets/box12.png\" alt=\"\" /></p>\n<h3 id=\"stylingthemargin\">Styling the margin</h3>\n<p>Finally, let's style the area outside the border. Let's give our element a top margin so that it has a space from the element on top of it of 60 pixels:</p>\n<pre><code class=\"css language-css\">#my-element{\n    margin-top: 60px;\n}\n</code></pre>\n<p><img src=\"/assets/box13.png\" alt=\"\" /></p>\n<p>With everything together, this is how our CSS would look like for our element:</p>\n<pre><code class=\"css language-css\">#my-element{\n/*     Content */\n    color: red;\n    font-size: 30px;\n\n/*     Padding */\n    padding: 30px;\n    background-color: #eee;\n\n/*   Border */\n    border: 21px solid black;\n\n/*   Margin */\n    margin-top: 60px;\n}\n</code></pre>\n<p>And this is how the box model makes layouts and styling possible.</p>\n<h2 id=\"nbspmoreinformation\">&nbsp;More information</h2>\n<p>To learn more about the box model, check this <a href=\"https://developer.mozilla.org/en-US/docs/Learn/CSS/Building_blocks/The_box_model\">amazing documentation by the MDN</a></p>",
        "series": "explained",
        "title": "The CSS Box Model, explained.",
        "publishDate": "2022/03/07 14:00",
        "thumbnail": "boxmodel.png",
        "description": "The box model is what makes styling possible with CSS. Let's explain what it is.",
        "keywords": [
            "css",
            "box model",
            "margin",
            "padding",
            "content",
            "styling",
            "web development"
        ],
        "twitterimage": "https://savvas.me/assets/boxmodel-tw.png"
    },
    {
        "slug": "css-flexbox",
        "content": "<p>Suppose you create a new web page.</p>\n<p>It only contains a heading and 5 link items in a list.</p>\n<p>Without any styling, the elements on the page go under each other, as you'd expect.</p>\n<p><img src=\"/assets/flex01.png\" alt=\"\" /></p>\n<p>HTML:</p>\n<pre><code class=\"html language-html\">&lt;h1&gt;My website&lt;/h1&gt;\n&lt;ul&gt;\n  &lt;li&gt;&lt;a href=\"#\"&gt;Home&lt;/a&gt;&lt;/li&gt;\n  &lt;li&gt;&lt;a href=\"#\"&gt;About me&lt;/a&gt;&lt;/li&gt;\n  &lt;li&gt;&lt;a href=\"#\"&gt;My projects&lt;/a&gt;&lt;/li&gt;\n  &lt;li&gt;&lt;a href=\"#\"&gt;My articles&lt;/a&gt;&lt;/li&gt;\n  &lt;li&gt;&lt;a href=\"#\"&gt;Contact me&lt;/a&gt;&lt;/li&gt;\n&lt;/ul&gt;\n</code></pre>\n<p>Of course you can style anything on the website, like making the heading colour red:</p>\n<pre><code class=\"css language-css\">h1{\n  color: red;\n}\n</code></pre>\n<p><img src=\"/assets/flex02.png\" alt=\"\" /></p>\n<p>Or making it so it looks like a navigation menu:</p>\n<pre><code class=\"css language-css\">ul{\n  list-style: none;\n  margin: 0;\n  padding: 0;\n}\n\nul li a{\n  text-decoration: none;\n  color: black;\n  display: block;\n  padding: 9px;\n  border: 1px solid black;\n  width: 90px;\n}\n</code></pre>\n<p><img src=\"/assets/flex03.png\" alt=\"\" /></p>\n<p>But to really make it look like a navigation, we have to change its style so that the navigation elements are side by side instead of one under the other. How is this possible?</p>\n<p>Determining which direction a list of elements should go, either downwards or sideways, can be set by a CSS property called <strong>Flexbox</strong>!</p>\n<h2 id=\"whatisflexbox\">What is Flexbox?</h2>\n<p>Flexbox is essentially a way of saying:</p>\n<blockquote>\n  <p>I have a bunch of elements, I want to decide whether these elements are shown vertically, or horizontally.</p>\n</blockquote>\n<p>In the case of our navigation elements above, the list items (<code>li</code>) are contained within an \"unordered list\" element (<code>ul</code>).</p>\n<p>Essentially we want to say:</p>\n<blockquote>\n  <p>I want the stuff that's in the unordered list element to be horizontal</p>\n</blockquote>\n<p>So we set the styling of the <code>ul</code> to include <code>display: flex</code>:</p>\n<pre><code class=\"css language-css\">ul{\n  list-style: none;\n  margin: 0;\n  padding: 0;\n\n  display: flex; /* 👈 \"I am now a Flexbox\" */\n}\n</code></pre>\n<p>The unordered list is now essentially a box with some list items on it.</p>\n<p>Now we can specify which direction the items within it should go: row or column:</p>\n<pre><code class=\"css language-css\">ul{\n  list-style: none;\n  margin: 0;\n  padding: 0;\n  display: flex;\n  flex-direction: row; /* 👈 Put items here in a row */\n}\n</code></pre>\n<p>Now each item in your navigation will be on a single row.</p>\n<p><img src=\"/assets/flex04.png\" alt=\"\" /></p>\n<p>Or if you'd rather have them in a column, use <code>flex-direction: column</code> instead.</p>\n<p>So what else can Flexbox do?</p>\n<h2 id=\"centeringadiv\">Centering a div!</h2>\n<p>With flexbox, it's easier than ever to center a <code>div</code>!</p>\n<p>Suppose you have a div and inside it, a piece of text in another div:</p>\n<pre><code class=\"html language-html\">&lt;div class=\"outer\"&gt;\n  &lt;div class=\"inner\"&gt;Some text&lt;/div&gt;\n&lt;/div&gt;\n</code></pre>\n<p>The outer div has a size of <code>300x120</code>:</p>\n<pre><code class=\"css language-css\">.outer{\n  border: 6px solid red;\n  width: 300px;\n  height: 120px;\n}\n</code></pre>\n<p><img src=\"/assets/flex05.png\" alt=\"\" /></p>\n<p>If we want the inner div to be centered, all we need to do is to set the outer div as a flexbox:</p>\n<pre><code class=\"css language-css\">.outer{\n  border: 6px solid red;\n  width: 300px;\n  height: 120px;\n  display: flex; /* 👈 I am now a flexbox */\n}\n</code></pre>\n<p>And set the <code>margin</code> of the inner div as <code>auto</code>:</p>\n<pre><code class=\"css language-css\">.inner{\n  margin: auto;\n}\n</code></pre>\n<p>That's it! Now the text is centered!</p>\n<p><img src=\"/assets/flex06.png\" alt=\"\" /></p>\n<h2 id=\"moreinformation\">More information</h2>\n<p>To learn more about flexbox, check these resources:</p>\n<ul>\n<li><p><a href=\"https://web.dev/learn/css/flexbox/\">Flexbox - web.dev</a></p></li>\n<li><p><a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Flexible_Box_Layout/Basic_Concepts_of_Flexbox\">Basic concepts of flexbox - MDN</a></p></li>\n<li><p><a href=\"https://en.wikipedia.org/wiki/CSS_Flexible_Box_Layout\">CSS Flexible Box Layout - Wikipedia</a></p></li>\n<li><p><a href=\"https://flexboxfroggy.com/\">Flexbox Froggy - Codepip: Learn flexbox by playing a game!</a></p></li>\n</ul>",
        "series": "explained",
        "title": "CSS Flexbox, explained.",
        "publishDate": "2022/05/11 12:00",
        "thumbnail": "flexbox.png",
        "description": "A brief introduction to the CSS property Flexbox.",
        "keywords": [
            "css",
            "flexbox",
            "flexible box",
            "web development",
            "web design",
            "flex"
        ],
        "twitterimage": "https://savvas.me/assets/flexbox-tw.png"
    },
    {
        "slug": "css-grid",
        "content": "<p>Suppose you are a photographer and you’ve taken some photos you want to show the world.</p>\n<p><img src=\"/assets/grid01.png\" alt=\"\" /></p>\n<p>So you decide to learn HTML and CSS so can create a website with all your photos.</p>\n<p>It takes you a bit of time but eventually you manage to upload all your photos for everyone to see!</p>\n<p>By default, a browser displays all elements one under the other. Your website is no exception.</p>\n<p><img src=\"/assets/grid02.png\" alt=\"\" /></p>\n<p>It’s great that you have a place to show off your work, but the website doesn’t quite look right. You want it to look less than a long document, and more like a gallery of photos!</p>\n<p>Essentially you want all your photos to be shown in rows and columns, like a grid. How can you do that?</p>\n<p>This is where CSS Grid comes in!</p>\n<p>Now suppose this is the <a href=\"/explained/html\">HTML</a> you created to place your photos:</p>\n<pre><code class=\"html language-html\">&lt;div id=\"myphotos\"&gt;\n    &lt;img src=\"photo01.jpg\" alt=\"\"&gt;\n    &lt;img src=\"photo02.jpg\" alt=\"\"&gt;\n    &lt;img src=\"photo03.jpg\" alt=\"\"&gt;\n    &lt;img src=\"photo04.jpg\" alt=\"\"&gt;\n    &lt;img src=\"photo05.jpg\" alt=\"\"&gt;\n    &lt;img src=\"photo06.jpg\" alt=\"\"&gt;\n    &lt;img src=\"photo07.jpg\" alt=\"\"&gt;\n    &lt;img src=\"photo08.jpg\" alt=\"\"&gt;\n    &lt;img src=\"photo09.jpg\" alt=\"\"&gt;\n&lt;/div&gt;\n</code></pre>\n<p>It’s basically a <code>div</code> called <code>myphotos</code> with some images. As we saw, by default, the images are displayed one under the other. We want to display these photos as a grid. Here’s how.</p>\n<p>First, in <a href=\"/explained/css\">CSS</a>, we set the “myphotos” div to <code>display: grid</code>:</p>\n<pre><code class=\"css language-css\">#myphotos{\n    display: grid;\n}\n</code></pre>\n<p>Next we’re going to tell our browser that we need a grid made up of 3 columns:</p>\n<pre><code class=\"css language-css\">#myphotos{\n    display: grid;\n    grid-template-columns: repeat(3, 1fr);\n}\n</code></pre>\n<p>Now our photo gallery actually looks like a gallery!</p>\n<p><img src=\"/assets/grid06.png\" alt=\"\" /></p>\n<p>As a last step to finalise our gallery, we can add some space between our photos by using <code>grid-gap</code> in CSS:</p>\n<pre><code class=\"css language-css\">#myphotos{\n    display: grid;\n    grid-template-columns: repeat(3, 1fr);\n    grid-gap: 15px;\n}\n</code></pre>\n<p>Now it looks even more like a gallery!</p>\n<p><img src=\"/assets/grid08.png\" alt=\"\" /></p>\n<p>This is essentially what CSS Grid lets us do. It lets us define columns and rows so we can organise elements in a grid. It works for every element, not just photos!</p>\n<p>CSS Grid works best in larger displays so to find out more about how to accommodate for different screen sizes, see:</p>\n<p><a href=\"/explained/responsive-design\">Responsive design, explained</a></p>\n<h2 id=\"nextsteps\">Next steps</h2>\n<p>Now that you got a good first idea of what a grid is, these will get you up to speed:</p>\n<ul>\n<li><p><a href=\"https://css-tricks.com/snippets/css/complete-guide-grid/\">A Complete Guide to Grid</a> - CSS Tricks</p></li>\n<li><p><a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Grid_Layout\">CSS Grid Layout</a> - MDN</p></li>\n<li><p><a href=\"https://www.youtube.com/watch?v=jV8B24rSN5o\">CSS Grid Layout Crash Course</a> - Traversy Media on YouTube</p></li>\n</ul>",
        "series": "explained",
        "title": "CSS Grid, explained.",
        "publishDate": "2022/05/26 12:00",
        "thumbnail": "cssgrid.png",
        "description": "A brief introduction to the CSS property Grid.",
        "keywords": [
            "css",
            "grid",
            "columns",
            "rows",
            "web development",
            "web design",
            "display grid"
        ],
        "twitterimage": "https://savvas.me/assets/cssgrid-tw.png"
    },
    {
        "slug": "css",
        "content": "<p>CSS is basically a document that decides how things should look like on a web page. What does this mean exactly?</p>\n<p>Suppose you want to create a webpage about your vacation in Crete. </p>\n<p><img src=\"/assets/css01.png\" alt=\"\" /></p>\n<p>To create the content of the web page, you'll need a file called HTML, which would look something like this:</p>\n<pre><code class=\"html language-html\">&lt;h1&gt;My vacation&lt;/h1&gt;\n\n&lt;p&gt;Last summer I went on vacation to the Greek islands or Rhodes and Crete. It was loads of fun&lt;/p&gt;\n\n&lt;p&gt;We went to the beach, ate tons of ice cream and enjoyed the sun so much that we got a little sunburned&lt;/p&gt;\n</code></pre>\n<p><a href=\"/explained/html\">More on HTML</a></p>\n<p>The document has a heading (\"My vacation\") and two paragraphs. In HTML, a heading is <code>&lt;h1&gt;</code> and a paragraph is <code>&lt;p&gt;</code>.</p>\n<p>Now the problem is that, although it's great that we can get our content out there, it's a little <em>boring</em>.</p>\n<p>What if we could give it a little colour? This is where CSS comes in.</p>\n<p>With CSS we can tell the browser to do things like:</p>\n<ul>\n<li><p>Give this heading a red colour</p></li>\n<li><p>Make some space between paragraphs so it doesn't look as crammed</p></li>\n<li><p>Change the size of this image so it's nice and tidy.</p></li>\n</ul>\n<p>So how do we do this?</p>\n<h2 id=\"addingcsstoyourwebsite\">Adding CSS to your website.</h2>\n<p>This is an example of a typical page made with HTML:</p>\n<pre><code class=\"html language-html\">&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n    &lt;title&gt;My vacation&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;h1&gt;My vacation&lt;/h1&gt;\n\n    &lt;p&gt;Last summer I went on vacation to the Greek islands or Rhodes and Crete. It was loads of fun&lt;/p&gt;\n\n    &lt;p&gt;We went to the beach, ate tons of ice cream and enjoyed the sun so much that we got a little sunburned&lt;/p&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\n<p>Suppose we need to make the heading have the colour red. In CSS it would look like this:</p>\n<pre><code class=\"css language-css\">h1{\n    color: red;\n}\n</code></pre>\n<p>Where <code>h1</code> is just our heading (as we discussed) and <code>color: red</code> basically says \"make the colour red\".</p>\n<p>The CSS code above basically says: </p>\n<blockquote>\n  <p>Whenever there's a first-level heading (<code>h1</code>), make it red.</p>\n</blockquote>\n<p>But we're still not done. We somehow need to tell the HTML file:</p>\n<blockquote>\n  <p>Hey HTML! I have some colours and stuff I want you to add to your page. Here's a file for it.</p>\n</blockquote>\n<p>To do this, go to the <code>&lt;head&gt;</code> of your page (remember, <code>head</code> is for stuff that aren't written on the page) and use this line, for a CSS file called <code>style.css</code>:</p>\n<pre><code class=\"html language-html\">&lt;head&gt;\n    &lt;link rel=\"stylesheet\" href=\"style.css\"/&gt;\n&lt;/head&gt;\n</code></pre>\n<p>That's it! If you load (or refresh) the page on your browser again, the heading will now appear red!</p>\n<p><img src=\"/assets/css02.png\" alt=\"\" /></p>\n<h2 id=\"morestuffyoucandowithcss\">More stuff you can do with CSS</h2>\n<p>CSS has loads of stuff you can \"style\" your web page with:</p>\n<ul>\n<li><p>Add a background color with <code>background-color: blue</code></p></li>\n<li><p>Change the size of something (like an image) with <code>width: 300px</code></p></li>\n<li><p>Make some space between things, like paragraphs with <code>margin: 30px</code></p></li>\n</ul>\n<h2 id=\"furthermore\">Further more</h2>\n<p>CSS can also be used to add styling to a page, depending on things like screen sizes. So you can actually make the page look different on desktops and mobile phones without having 2 separate pages! These are called \"media queries\" which we'll get to on a later date!</p>\n<h2 id=\"nextsteps\">Next steps</h2>\n<p>Now you know what CSS is all about. It's basically about taking a page with content and changing how it looks!</p>\n<p>Now that you got a basic idea of CSS, here are some links to go study further:</p>\n<ul>\n<li><p><a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS\">CSS by MDN Web Docs</a></p></li>\n<li><p><a href=\"https://www.w3schools.com/css/\">CSS tutorial by W3 Schools</a></p></li>\n</ul>",
        "series": "explained",
        "title": "CSS, explained.",
        "publishDate": "2022/01/16 17:57",
        "thumbnail": "css.png",
        "description": "CSS makes the web a more colourful place. So what is it? Let's explain.",
        "keywords": [
            "html",
            "css",
            "web",
            "cascading style sheets",
            "explained."
        ],
        "twitterimage": "https://savvas.me/assets/css-tw.png"
    },
    {
        "slug": "currying",
        "content": "<p>\"CURRYING\" is an excellent way in Javascript to keep your code more organised and meaningful.</p>\n<p>But what is currying and why is it so great?</p>\n<p>Let's explain.</p>\n<p>So suppose you decided to keep yourself more organised. So it makes sense that you'd use a to-do app.</p>\n<p>You decide to create one yourself.</p>\n<p>To-do apps are a great way to get organised because you can easily add tasks to a list whenever you think of something.</p>\n<p>You can easily mark them as in progress when you start working on those tasks, or complete once you're done with them.</p>\n<p>You decide to create it in Javascript. One of the major parts of your app, is a function that actually adds new items to your task list.</p>\n<p>It looks like this:</p>\n<pre><code class=\"js language-js\">addTask(status, title){\n    console.log(`${title}: ${status}`)\n}\n</code></pre>\n<p>The <code>status</code> argument takes in a string which is the stage of progress of your task: \"NEW\", \"INPROGRESS\", or \"COMPLETE\".</p>\n<p>The <code>title</code> argument, is just the text that appears as your task.</p>\n<p>For example, to create a task with status \"NEW\", you'd do this:</p>\n<pre><code class=\"js language-js\">addTask(\"NEW\", \"Buy milk\")\n</code></pre>\n<p>Sometimes, you'd want to add a task that you've already started working on, so you set the status as \"INPROGRESS\":</p>\n<pre><code class=\"js language-js\">addTask(\"INPROGRESS\", \"Buy milk\")\n</code></pre>\n<p>But that's a rare occurrence. Most of the time however, for new tasks, the status will be \"NEW\" since the most usual thing is to create a task that you'd revisit later to get it started.</p>\n<p>We need a way to say: \"Keep the addTask function as is, but create another function based on addTask which always creates a 'NEW' task without me telling it to\".</p>\n<p>Something like this:</p>\n<pre><code class=\"js language-js\">addNewTask(\"Cut the grass\")\n</code></pre>\n<p>This can be done using CURRYING.</p>\n<p>Currying basically turns the <code>addTasks</code> function from this:</p>\n<pre><code class=\"js language-js\">addTask(\"INPROGRESS\", \"Buy milk\")\n</code></pre>\n<p>To this:</p>\n<pre><code class=\"js language-js\">addTask(\"INPROGRESS\")(\"Buy milk\")\n</code></pre>\n<p>But why?</p>\n<p>Now we can use this to create our <code>addNewTask</code> function which always adds a task with status 'NEW':</p>\n<pre><code class=\"js language-js\">let addNewTask = addTask(\"NEW\")\n</code></pre>\n<p>So we can use it like this:</p>\n<pre><code class=\"js language-js\">addNewTask(\"Cut the grass\")\n</code></pre>\n<p>Now we have a task for the most common usage of our function, thanks to currying!</p>\n<p>So how can we create a \"curried\" function?</p>\n<p>Let's go back to our old <code>addTask</code> function, which just prints the title and status to the console:</p>\n<pre><code class=\"js language-js\">addTask(status, title){\n    console.log(`${title}: ${status}`)\n}\n</code></pre>\n<p>Currying is essentially a function returning another function.</p>\n<p>In our case, it'll be something like this:</p>\n<p>We start with <code>addTask</code> having only one argument (status):</p>\n<pre><code class=\"js language-js\">addTask(status){\n\n}\n</code></pre>\n<p>Then this function will return another function with the second argument:</p>\n<pre><code class=\"js language-js\">addTask(status){\n    return function(title){\n\n    }\n}\n</code></pre>\n<p>Which in turn will print the title and status in the console:</p>\n<pre><code class=\"js language-js\">addTask(status){\n    return function(title){\n        console.log(`${title}: ${status}`)\n    }\n}\n</code></pre>\n<p>That's it! Now you can use it like this:</p>\n<pre><code class=\"js language-js\">addTask(\"NEW\")(\"Buy milk\")\n\nlet addNewTask = addTask(\"NEW\")\naddNewTask(\"Cut the grass\")\n</code></pre>\n<p>Currying helps you write Javascript code that just makes sense.</p>\n<p>👉 Better code.</p>\n<p>👉 Happier developers.</p>\n<p>👉 Better apps</p>\n<p>👉 Happier users.</p>\n<p>👋 Thanks for reading!</p>",
        "series": "explained",
        "title": "Currying in Javascript, explained.",
        "publishDate": "2021/09/14 12:00",
        "thumbnail": "currying.png",
        "description": "An introduction to currying in Javascript",
        "keywords": [
            "programming",
            "javascript",
            "currying"
        ],
        "twitterimage": "https://savvas.me/assets/currying-tw.png"
    },
    {
        "slug": "docker",
        "content": "<p>So you've just built a project. Let's say it's a to-do app. There are plenty of things involved:</p>\n<ul>\n<li>front-end</li>\n<li>back-end</li>\n<li>database… </li>\n</ul>\n<p>For your project, you're using React as front end, Python with Flask as a backend API, and MySQL as a database. </p>\n<p>You're also using Mac as your main operating system on your computer for developing and testing your app locally.</p>\n<p>Anything you download for your app has been tailored for the operating system you're using. </p>\n<p>Now you talk to your friend about this app you're building and he seems pretty excited to try it out! Thing is, it's not hosted anywhere at the moment so it's only available locally. </p>\n<p>So you need to tell your friend that he needs to get the code from Github, then download the necessary stuff in order to run the app: Node, Python, MySQL etc. </p>\n<p>So your friend, who is running Ubuntu, goes ahead and installs the necessary tools to run your to-do app.</p>\n<p>Once everything is up and running, your friend tries to run your to-do app. But… he fails. <em>WHY? WHAT IS GOING ON?</em></p>\n<p>After days of investigation, you find out that you're running different versions of MySQL and different versions of Node. It turns out, this is because you're running different operating systems! </p>\n<p>After days of debugging, painful googling and comparing versions, you finally manage to get your to-do app up and running on his machine. </p>\n<p>What if there was an easier way to do this? What if you could just have one version of each tool, or even the operating system, put it into a little package and send it to anyone who wants to run your app straight away? And it would run correctly every time without the hassle? </p>\n<p>Enter <strong>Docker</strong>! </p>\n<p>Docker is a tool that helps you grab everything, from the operating system, to all the frameworks, tools and libraries you might need and put them into little packages called \"containers\".</p>\n<p>These packages are created so you can easily take them wherever you want. Either give it to your friend to try your app, for a colleague to be able to develop using the same environment, or even put it on a server. </p>\n<p>You can feel confident that no matter where you put the container, whichever operating system or environment, the app will work the same way! </p>\n<p>In the case of your app, with Docker, you can create a container, add a specific version of Linux, install the latest version of Python, the latest version of Node and the latest version of MySQL. You can give the container to your friend and he will have all the same versions! </p>\n<p>To get started with your first container is quite simple too! First install Docker <a href=\"https://docker.com/get-started\">see here</a>, open a terminal and type this:</p>\n<pre><code class=\"bash language-bash\">docker run -it ubuntu \n</code></pre>\n<p>The command will create a new container which has Ubuntu as the operating system.</p>\n<p>The first time you run it, it will take a while until it it downloads the stuff necessary to run Ubuntu, or the Ubuntu \"image\". \nNow you can run commands just like you would in a normal Ubuntu installation! Give it a go! </p>\n<p>You can find lots of ready-made \"images\" for various tools such as Node, Python, MySQL etc. in the Docker Hub.</p>\n<p><a href=\"https://hub.docker.com\">Check it out here</a></p>\n<p>Enjoy using Docker and its countless capabilities! </p>",
        "series": "explained",
        "title": "Docker, explained.",
        "publishDate": "2021/04/14 16:20",
        "thumbnail": "docker.png"
    },
    {
        "slug": "flexbox-vs-grid",
        "content": "<p>Both are tools in CSS that help you take a group of elements and lay them out in specific ways. </p>\n<p>So what does each one do and how do they differ?</p>\n<p>To explain, let's start with a group of 5 elements:</p>\n<pre><code class=\"html language-html\">&lt;section&gt;\n    &lt;div&gt;Element 1&lt;/div&gt;\n    &lt;div&gt;Element 2&lt;/div&gt;\n    &lt;div&gt;Element 3&lt;/div&gt;\n    &lt;div&gt;Element 4&lt;/div&gt;\n    &lt;div&gt;Element 5&lt;/div&gt;\n&lt;/section&gt;\n</code></pre>\n<p>As you'd expect, if you run the HTML code above, each element appears below the previous. Like this (some minor styling added for emphasis):</p>\n<p><img src=\"/assets/gridflex1.png\" alt=\"\" /></p>\n<p>What if you don't want each element to appear one under the other? What if you want to have a navigation bar and you want the elements to appear next to each other?</p>\n<p>Like this 👇</p>\n<p><img src=\"/assets/gridflex2.png\" alt=\"\" /></p>\n<p>Sure there are CSS hacks you could do to make them look how you want them (I'm sure you're thinking of a few right now) but they are all messy and a nightmare to maintain.</p>\n<p>This is where Flexbox comes in! 💪</p>\n<p>The way it works is pretty simple. Notice how in the <code>HTML</code> code, we have a <code>&lt;section&gt;</code> which includes our 5 elements? 👇</p>\n<pre><code class=\"html language-html\">&lt;section&gt;\n    &lt;div&gt;Home&lt;/div&gt;\n    &lt;div&gt;About&lt;/div&gt;\n    &lt;div&gt;Projects&lt;/div&gt;\n    &lt;div&gt;Skills&lt;/div&gt;\n    &lt;div&gt;My CV&lt;/div&gt;\n&lt;/section&gt;\n</code></pre>\n<p>You can style the <code>&lt;section&gt;</code> like this to make it a \"Flexbox\":</p>\n<pre><code class=\"css language-css\">section{\n  display: flex;\n}\n</code></pre>\n<p>That's it! Now your <code>&lt;div&gt;</code> elements will appear next to each other, just like you want them to!</p>\n<p>In essence, a Flexbox puts its elements in a single direction, either horizontally or vertically. Really useful for laying out elements next to each other!</p>\n<p>Now say you have a website which has a photo gallery. A cool way to present the photos is in a grid, like this:</p>\n<p><img src=\"/assets/gridflex3.png\" alt=\"\" /></p>\n<p>Again, there are several ways to create a grid of photos, a lot of which are messy and clumsy.</p>\n<p>So could Flexbox help us with this?</p>\n<p>Technically, yes. If we do something like this:</p>\n<pre><code class=\"html language-html\">&lt;section&gt;\n    &lt;div class=\"row-divider\"&gt;\n      &lt;img src=\"img1.png\" alt=\"\"&gt;\n      &lt;img src=\"img2.png\" alt=\"\"&gt;\n      &lt;img src=\"img3.png\" alt=\"\"&gt;\n    &lt;/div&gt;\n    &lt;div class=\"row-divider\"&gt;\n      &lt;img src=\"img4.png\" alt=\"\"&gt;\n      &lt;img src=\"img5.png\" alt=\"\"&gt;\n      &lt;img src=\"img6.png\" alt=\"\"&gt;\n    &lt;/div&gt;\n    &lt;div class=\"row-divider\"&gt;\n      &lt;img src=\"img7.png\" alt=\"\"&gt;\n      &lt;img src=\"img8.png\" alt=\"\"&gt;\n      &lt;img src=\"img9.png\" alt=\"\"&gt;\n    &lt;/div&gt;\n&lt;/section&gt;\n</code></pre>\n<p>Then we can make each <code>row-divider</code> a Flexbox to align our images horizontally:</p>\n<pre><code class=\"css language-css\">section .row-divider{\n  display: flex;\n}\n</code></pre>\n<p>It works! But it doesn't look particularly clean. What if there was a better way? Without needing to have a row divider? </p>\n<p>There is! With CSS Grid!</p>\n<p>CSS Grid is hands-down the easiest way to create a grid layout. No more row dividers. Just plain HTML and CSS.</p>\n<p>So your HTML would simply be this 👇</p>\n<pre><code class=\"html language-html\">&lt;section&gt;\n    &lt;img src=\"img1.png\" alt=\"\"&gt;\n    &lt;img src=\"img2.png\" alt=\"\"&gt;\n    &lt;img src=\"img3.png\" alt=\"\"&gt;\n    &lt;img src=\"img4.png\" alt=\"\"&gt;\n    &lt;img src=\"img5.png\" alt=\"\"&gt;\n    &lt;img src=\"img6.png\" alt=\"\"&gt;\n    &lt;img src=\"img7.png\" alt=\"\"&gt;\n    &lt;img src=\"img8.png\" alt=\"\"&gt;\n    &lt;img src=\"img9.png\" alt=\"\"&gt;\n&lt;/section&gt;\n</code></pre>\n<p>Now if we need to say:</p>\n<blockquote>\n  <p>Let's create a grid with 3 columns of equal size</p>\n</blockquote>\n<p>You can do this with 2 <code>CSS</code> statements for your <code>&lt;section&gt;</code>:</p>\n<pre><code class=\"css language-css\">section{\n  display: grid;\n  grid-template-columns: repeat(3, 1fr);\n}\n</code></pre>\n<p>That's it!</p>\n<p>Flexbox and CSS Grid can greatly improve your workflow and simplify your code!</p>\n<p>And that's how the two layouts differ. Thank you for reading! 👋👋</p>\n<p><img src=\"/assets/gridflex4.png\" alt=\"\" /></p>\n<h2 id=\"furtherinfo\">Further info</h2>\n<ul>\n<li><p><a href=\"https://twitter.com/Prathkum/status/1379402629562961923\">Printable Flexbox cheatsheet by @Prathkum</a> on Twitter</p></li>\n<li><p><a href=\"https://twitter.com/Prathkum/status/1378726463013187584\">Printable CSS Grid cheatsheets by @Prathkum</a> on Twitter</p></li>\n</ul>",
        "series": "explained",
        "title": "Should I use Flexbox or CSS Grid?",
        "publishDate": "2021/04/13 16:09",
        "thumbnail": "grid.png"
    },
    {
        "slug": "for-loops",
        "content": "<p>Another one of the absolute basic programming concepts are \"loops\".</p>\n<p>The <code>for</code> loop is one of the most common types of it.</p>\n<p>So what is it and how does it work?</p>\n<p>Let's explain:</p>\n<p>A <code>for</code> loop is basically a way of saying:</p>\n<blockquote>\n  <p>Here's a list of stuff, grab each one and do something specific with each one of them</p>\n</blockquote>\n<p>This could be something like:</p>\n<blockquote>\n  <p>Here's a list of names, grab each one of them and display them on the screen</p>\n</blockquote>\n<p>Or</p>\n<blockquote>\n  <p>Here's a list of text strings, check each one is under 5 characters long</p>\n</blockquote>\n<p>\"For\" and \"for each\" loops are created for this very purpose. For example, in Python this is how you'd say:</p>\n<blockquote>\n  <p>Here's a list of names, grab each one of them and display them on the screen</p>\n</blockquote>\n<pre><code class=\"py language-py\">names = [\"Savvas\", \"Alice\", \"Bob\"]\n\nfor name in names:\n    print(name)\n</code></pre>\n<p>In Javascript, there are two ways to do it.</p>\n<p>With a \"for\" loop:</p>\n<pre><code class=\"js language-js\">let names = [\"Savvas\", \"Alice\", \"Bob\"]\n\nfor(let i = 0 ; i &lt; names.length ; i++){\n    console.log(names[i])\n}\n</code></pre>\n<p>Or with a \"for each\" loop:</p>\n<pre><code class=\"js language-js\">let names = [\"Savvas\", \"Alice\", \"Bob\"]\n\nnames.forEach((name) =&gt; {\n    console.log(name)\n})\n</code></pre>\n<p>And to say:</p>\n<p>\"Here's a list of text strings, check each one is under 5 characters long\",</p>\n<p>in Javascript we could do:</p>\n<pre><code class=\"js language-js\">let textStrings = [\"a\", \"bbb\", \"cccccc\"]\n\nnames.forEach((text) =&gt; {\n    if(text.length &lt; 5){\n        console.log(\"The text is under 5 characters long\")\n    }\n    else{\n        console.log(\"The text is NOT under 5 characters long\")\n    }\n})\n</code></pre>\n<p>In conclusion, \"for\" and \"for each\" loops are a straightforward ways to perform an action for each element in an array of strings, numbers or objects.</p>",
        "series": "explained",
        "title": "For loops, explained.",
        "publishDate": "2021/10/04 14:33",
        "thumbnail": "forloops.png",
        "description": "A simple introduction to for loops in programming",
        "keywords": [
            "programming",
            "for",
            "forEach",
            "loops",
            "programming basics",
            "python",
            "javascript"
        ],
        "twitterimage": "https://savvas.me/assets/for-tw.png"
    },
    {
        "slug": "foreach-vs-map",
        "content": "<p>If you're learning Javascript, sooner or later you'll come across the <code>forEach()</code> and <code>map()</code> functions. It is quite often that there is some confusion about what each one does. What we know for certain is that they are both ways to take all elements in an array and do <em>something</em> with each element individually.</p>\n<p>So how are they different?</p>\n<p>To explain, let's start with an array, since both functions deal with looping through arrays:</p>\n<pre><code class=\"javascript language-javascript\">let names = [\"Savvas\", \"Laura\", \"Morgan\"]\n</code></pre>\n<p>Above I've initialised an array that contains three names.</p>\n<p>Now let's say, you just need to print these three names. The straightforward solution to this is to use <code>forEach()</code>! And you'll be right! <code>forEach()</code> is the best way to do this.</p>\n<p>It looks like this:</p>\n<pre><code class=\"javascript language-javascript\">names.forEach((name) =&gt; {\n    console.log(name)\n})\n</code></pre>\n<p>Same if you need to do something slightly more complex, like storing these names into a database:</p>\n<pre><code class=\"javascript language-javascript\">names.forEach((name) =&gt; {\n    database.storeName(name)\n})\n</code></pre>\n<p>Now let's suppose that you want to create a new array, but with all the names in <code>names</code> in lowercase. If we were to use <code>forEach()</code>, we would need to:</p>\n<ul>\n<li>Create an empty array <code>lowercaseNames</code></li>\n<li>Loop through the <code>names</code> array using <code>forEach</code></li>\n<li>For each item, turn the name into lowercase and store it into the empty array</li>\n</ul>\n<p>So the code would look like this:</p>\n<pre><code class=\"javascript language-javascript\">let lowercaseNames = []\n\nnames.forEach((name) =&gt; {\n    let nameInLowercase = name.toLowerCase()\n    lowercaseNames.push(nameInLowercase)\n})\n</code></pre>\n<p>Which could work, but the solution seems a bit complex and not-so straightforward. Also, creating an empty array and populating it works, but it doesn't look particularly clean.</p>\n<p>What if there was a better way of saying:</p>\n<blockquote>\n  <p>I want to do something with each element in an array and I want to get back an array of the same length as a result</p>\n</blockquote>\n<p>You can do this… with <code>map()</code>!</p>\n<p><code>map()</code> is basically an easy way to loop through an array, but for each element, something is returned.</p>\n<p>For example, we can say:</p>\n<blockquote>\n  <p>Return the lowercase version of each element in the <code>names</code> array.</p>\n</blockquote>\n<p>It would look something like this:</p>\n<pre><code class=\"javascript language-javascript\">names.map((name) =&gt; {\n    let nameInLowercase = name.toLowerCase()\n    return nameInLowercase\n})\n</code></pre>\n<p>That's it! And since at the end, everything that is returned gets stored in a new array, we can just initialise it like so:</p>\n<pre><code class=\"javascript language-javascript\">let lowercaseNames = names.map((name) =&gt; {\n    var nameInLowercase = name.toLowerCase()\n    return nameInLowercase\n})\n</code></pre>\n<p>It's that simple! Isn't this much nicer than the above example with <code>forEach()</code>?</p>\n<p>I hope this short post made <code>forEach</code> and <code>map</code> a little easier to understand! 👋</p>",
        "series": "explained",
        "title": "Should I use forEach() or map()?",
        "publishDate": "2021/03/28 15:46",
        "thumbnail": "loop.png"
    },
    {
        "slug": "git",
        "content": "<p>What is Git?</p>\n<p>You've heard about Git, possibly GitHub, as an essential tool for every developer. But what is Git? And what makes it <em>so</em> great that makes it almost <em>synonymous</em> with software development?</p>\n<h2 id=\"letsexplain\">Let's explain!</h2>\n<p>Let's say you're building a web app. Say, a to-do app.</p>\n<p>You've already built the basics of the app: </p>\n<ul>\n<li>the front-end</li>\n<li>the back-end</li>\n<li>the database to store the tasks.</li>\n</ul>\n<p>You've also included some basic functionality like reading, adding and completing tasks.</p>\n<p>Now you have a list of additional stuff to add to your to-do app:</p>\n<ul>\n<li>Updating task names</li>\n<li>Including notes to your tasks</li>\n<li>Add labels</li>\n<li>Deleting tasks</li>\n</ul>\n<p>The list goes on and on.</p>\n<p>And everything gets overwhelming.</p>\n<p>You remember however that one of your friends is also a software developer.</p>\n<p>You show him the app and he loves it.</p>\n<p>You mention that you have a whole bunch of things you want to add to your app, so he suggests you both work together.</p>\n<p>You agree straight away!</p>\n<p>You agree to split the tasks between you. </p>\n<p>He will be working on including notes to the tasks.</p>\n<p>You will be working on updating the task names.</p>\n<p>So your friend asks for the code you've worked on so far so he can work on his task alongside you.</p>\n<p>You store the whole source code in a ZIP file and send it to him.</p>\n<p>You work on your stuff while he works on his.</p>\n<p>Your friend finally finishes his part. He can now add notes to the to-do app. So he bundles the finished code into a ZIP file and e-mails it with all the changes.</p>\n<p>At the same time you've finished your part. You can now update the task name.</p>\n<p>You are now tasked with taking your updated code and your friend's updated code and combine them. </p>\n<p>You have to put everything into a single code base without messing everything up. </p>\n<p>If you do you'll have to start over…</p>\n<p>After 5 long and frustrating hours of messing with the code and fixing the bugs you've caused, you finally managed to finish the code.</p>\n<p>Now it's on to the next tasks.</p>\n<p>You agree on your next pieces of work and the painful cycle continues again.</p>\n<p>And again… </p>\n<p>And again…</p>\n<p>Instead of sending the code back and forth, and then wasting hours to combine the code, wouldn't it be nice if the code lived in a space somewhere you both have access to? </p>\n<p>And if you need to make changes, you just send the new code to that space and it would just get updated?</p>\n<p>And if your friend sends some new code over it would automatically get updated as well? And make it a lot less likely that you'll have to painstakingly combine the code and hope that it works?</p>\n<p>This is possible thanks to:</p>\n<p>Git!</p>\n<p><img src=\"/assets/git.png\" alt=\"\" /></p>\n<p>Git is a tool that lets you put your code in a place where everyone who needs to work on the code can access it. It could be online or anywhere else. </p>\n<p>The important thing is, everyone who needs to update code within the same code base can do so thanks to Git!</p>\n<p>So you and your friend have decided to use Git. You put the code base for the to-do app on GitHub, an online service for storing code like we mentioned.</p>\n<p>So you decide to add some more features to your app.</p>\n<p>You are tasked with setting tasks as specific colours.</p>\n<p>Your friend is tasked with adding images to tasks.</p>\n<p>You both add a copy of the code to your own computers. You both make the necessary changes.</p>\n<p>Once you're done you put your code changes back to the central code on Github.</p>\n<p>Once your friend is done with his changes, he does the same.</p>\n<p>Much easier!</p>\n<p>Other things you can do with Git:</p>\n<ul>\n<li>Go back to a previous version if you've made a mistake</li>\n<li>Keep a complete log of who made which changes since the beginning</li>\n<li>Create \"branches\" so that the main part of the code doesn't get immediately affected.</li>\n</ul>\n<p>And much much more!</p>\n<h2 id=\"learnmoreaboutgit\">Learn more about Git</h2>\n<p>This is Git in a nutshell.</p>\n<p>There's obviously a lot more about Git which I won't cover here (maybe in a future thread). </p>\n<p>To learn more, here's a <a href=\"https://atlassian.com/git\">very comprehensive guide by Atlassian</a></p>\n<p>Thank you for reading!</p>\n<p>If you liked this explanation, <a href=\"/explained\">see here for more explanations of dev tools</a>!</p>",
        "series": "explained",
        "title": "Git, explained.",
        "publishDate": "2021/05/06 9:00",
        "thumbnail": "git.png",
        "description": "Git is a must for collaborating with other developers. Let's explain further.",
        "keywords": [
            "git",
            "software engineering",
            "open source",
            "github"
        ],
        "twitterimage": "https://savvas.me/assets/git-tw.png"
    },
    {
        "slug": "graph-databases",
        "content": "<p>Suppose you have a bunch of phone numbers from all of your friends.</p>\n<p>You want a way to store these numbers so you can easily find them whenever you want on your computer.</p>\n<p>Since you know about databases, you decide to make an SQL database and store the phone numbers there.</p>\n<p><img src=\"/assets/graph-table.png\" alt=\"\" /></p>\n<p>That’s great! Now you have a place where you can store your friends’ phone numbers!</p>\n<p>Now, you decide to store your friends' parents' phone numbers as well. </p>\n<p>Just in case you forget, you decide to label the new numbers as your friends' parents.</p>\n<p>How would you do that?</p>\n<p>If your answer is to create a ”relationships” table and work with that, then yes, that would be the relational way of tackling this problem.</p>\n<p>However, this seems to overcomplicate stuff. What if there was a different type of database, not dependent on SQL, that is specifically designed to store relationships between entries?</p>\n<p>There is: </p>\n<h2 id=\"entergraphdatabases\">Enter GRAPH DATABASES</h2>\n<p>Graph databases are basically databases, just like any other, but instead of tables, the entries are connected by their relationships.</p>\n<p>For example, you can store the names of your friends:</p>\n<p><img src=\"/assets/graph-entities.png\" alt=\"\" /></p>\n<p>But now you can join them together and put a label.</p>\n<p><img src=\"/assets/graph-relationship.png\" alt=\"\" /></p>\n<p>And you can obviously include everyone's phone numbers as well:</p>\n<p><img src=\"/assets/graph-incphone.png\" alt=\"\" /></p>\n<p>This way of storing relationships is such more clear and makes much more sense than just storing these in a relational database! Right? </p>\n<h2 id=\"sohowdoigetstarted\">So how do I get started?</h2>\n<p>One such database is called Neo4J. It is a graph database based on a language called Cypher. </p>\n<p>Here’s how it works:</p>\n<p>The Cypher code below, firstly creates the two entries for Alice and Frank and then binds them together by their relationship:</p>\n<pre><code>CREATE (frank:Person {name: “Frank”, phone: “989522577”})\nCREATE (alice:Person {name: “Alice”, phone: “519198724”})\n\nCREATE (frank)-[:IS_PARENT_OF]-&gt;(alice)\n</code></pre>\n<p>And this, in very general terms, is how graph databases work!</p>",
        "series": "explained",
        "title": "Graph databases, explained.",
        "publishDate": "2021/11/10 12:25",
        "thumbnail": "graphdb.png",
        "description": "Graph databases is a type of NoSQL database that makes it easier to store relationships between entries. Let's explain further",
        "keywords": [
            "graph databases",
            "graph",
            "database",
            "neo4j"
        ],
        "twitterimage": "https://savvas.me/assets/graphdb-tw.png"
    },
    {
        "slug": "graphql",
        "content": "<p>You probably heard of GraphQL as a new way to retrieve data from a web service. Possibly as an alternative to REST services. But what is it exactly?</p>\n<h2 id=\"letsexplain\">Let's explain!</h2>\n<p>Imagine you need to retrieve some data about a certain user from a web service. The web service is REST based.</p>\n<p>To get information about a user if you know the ID of the user is to make a request to a specific URL.</p>\n<p>If you're trying to get the details of the user with ID <code>101</code>, then the URL would be:</p>\n<pre><code>https://api.mydatabase.com/user/101\n</code></pre>\n<p>The user details are returned as a <code>JSON</code> file, like this:</p>\n<pre><code class=\"json language-json\">{\n    \"id\": 101,\n    \"username\": \"juliet\",\n    \"name\": \"Juliet\",\n    \"surname\": \"Annora\",\n    \"dateOfBirth\": \"04/05/1985\",\n    \"email\": \"jannora@mymail.com\",\n    \"phone\": \"090292192\",\n    \"countryOfResidence\": \"Kiribati\"\n}\n</code></pre>\n<p>Now, that's a lot of information returned by the web service. You only need specific information, such as the username, the name and surname. Can you <em>only</em> get this specific information?</p>\n<p>This can only happen if the developer of the API has specficically added functionality to retrieve specific information and that would be weird and unintuitive with REST-ful services.</p>\n<p>Basically in most cases, you're stuck with all this data which most will end up being junk.</p>\n<p>What if there was a more explicit way of saying, \"I need this information and I don't need anything else?\"</p>\n<h2 id=\"entergraphql\">Enter GraphQL!</h2>\n<p>GraphQL is basically a way of saying something like this:</p>\n<blockquote>\n  <p>I need to get data about a specific user. I only need to get their username, their first name and last name. Nothing less, nothing more.</p>\n</blockquote>\n<p>GraphQL will do it. It will give you exactly what you need.</p>\n<h2 id=\"sohowdoesitwork\">So how does it work?</h2>\n<p>We start of with a basic URL:</p>\n<pre><code>https://api.mydatabase.com\n</code></pre>\n<p>This URL will be the same for the entire API, whether we need user data, or anything else.</p>\n<p>Next we need our GraphQL statement. The statement to retrieve the username, name and surname from a user with ID <code>101</code> would look something like this:</p>\n<pre><code>{\n    user(id: 101){\n        username\n        name\n        surname\n    }\n}\n</code></pre>\n<p>GraphQL will give you back exactly what you asked for in the exact format you requested it:</p>\n<pre><code class=\"json language-json\">{\n    user{\n        \"username\": \"juliet\",\n        \"name\": \"Juliet\",\n        \"surname\": \"Annora\"\n    }\n}\n</code></pre>\n<p>So not only did it give you back only what you asked for, the response is the exact same format as the request, as if you gave it some blanks and the API filled them in! Isn't that amazing? No more wasted data!</p>\n<h2 id=\"whatsnext\">What's next?</h2>\n<p>I hope this simple explanation helped you understand the basics of GraphQL and why it has become so popular.</p>\n<p>To get started with GraphQL, TheNetNinja has an <em>amazing</em> free course on YouTube on how to build your first GraphQL service with Node and React. Enjoy!</p>\n<iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/ed8SzALpx1Q\" title=\"YouTube video player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe>",
        "series": "explained",
        "title": "GraphQL, explained.",
        "publishDate": "2021/06/03 14:33",
        "thumbnail": "gql.png",
        "description": "A simple introduction to GraphQL and why it's used",
        "keywords": [
            "graphql",
            "web development",
            "api"
        ],
        "twitterimage": "https://savvas.me/assets/gql-tw.png"
    },
    {
        "slug": "hoisting",
        "content": "<p>What is Hoisting in Javascript?</p>\n<h2 id=\"letsexplain\">Let's explain!</h2>\n<p>Suppose you're writing a function in Javascript. A very simple function that just prints \"Hello\" to the console:</p>\n<pre><code class=\"js language-js\">let sayHello = function(){\n    console.log(\"Hello\");\n}\n</code></pre>\n<p>Now to actually make the function get \"Hello\" to print in the console, you'll need to call the function. It makes sense that you'll call the function after it's been defined right?</p>\n<pre><code class=\"js language-js\">let sayHello = function(){\n    console.log(\"Hello\");\n}\n\nsayHello();\n</code></pre>\n<p>Now you're reading about how to make your code more readable and cleaner and you hear about calling the functions <em>above</em> the function itself. In other words:</p>\n<pre><code class=\"js language-js\">sayHello();\n\nlet sayHello = function(){\n    console.log(\"Hello\");\n}\n</code></pre>\n<p>But what would happen if you execute this code?</p>\n<p>You'll get this error:</p>\n<pre><code>Uncaught ReferenceError: sayHello is not defined\n</code></pre>\n<p>Which makes sense! You can't just call a function before it's defined! Right?</p>\n<p>We need a way to define the function <em>as soon as the script runs</em> so it's available for me to run wherever I need.</p>\n<p>This thing is possible with a technique called Hoisting!</p>\n<p>Let's have another look at the function and notice how it is defined:</p>\n<pre><code class=\"js language-js\">let sayHello = function(){\n    console.log(\"Hello\");\n}\n</code></pre>\n<p>It is defined using the <code>let</code> keyword. This means that the function is defined <em>at that point</em>. Not before - not after. To make this work…</p>\n<pre><code class=\"js language-js\">sayHello();\n\nlet sayHello = function(){\n    console.log(\"Hello\");\n}\n</code></pre>\n<p>You'll need to give it priority, lift it at the top of the queue. In other words you need to <strong>hoist</strong> it.</p>\n<p>How do you do that?</p>\n<p>Simply change your function definition to this:</p>\n<pre><code class=\"js language-js\">function sayHello(){\n    console.log(\"Hello\");\n}\n</code></pre>\n<p>Now when you call the <code>sayHello()</code> function above the definition:</p>\n<pre><code class=\"js language-js\">sayHello();\n\nfunction sayHello(){\n    console.log(\"Hello\");\n}\n</code></pre>\n<p>You'll get the desired result!</p>\n<pre><code class=\"sh language-sh\">&gt; Hello\n</code></pre>\n<p>And that's how hoisting works in simple words. Thank you for reading. I hope this has made hoisting slightly easier. 👋👋👋</p>",
        "series": "explained",
        "title": "Javascript Hoisting, explained.",
        "publishDate": "2021/07/19 13:00",
        "thumbnail": "hoisting.png",
        "description": "A brief and simple explanation of Hoisting in Javascript",
        "keywords": [
            "web development",
            "javascript",
            "hoisting",
            "explained"
        ],
        "twitterimage": "https://savvas.me/assets/jshoisting-tw.png"
    },
    {
        "slug": "html",
        "content": "<p>HTML is basically a piece of text that your browser (like Chrome, Firefox, or Edge) reads to show you a website on your screen.</p>\n<p>This piece of text contains some instructions on what to show on the website, and also some details about the site itself, for example what to show on the tab when the website is opened.</p>\n<p>So how does it work?</p>\n<p>Suppose you want to write a small document. Something that contains a title and two paragraphs. Something that would look like this:</p>\n<p><img src=\"/assets/html-basicdoc.png\" alt=\"A basic document with a title and two paragraphs\" /></p>\n<p>You can tell a browser how to show this a web page using HTML.</p>\n<p>HTML uses \"tags\" to label each line of text. For example:</p>\n<p>A title (or a first-level heading) can be written using the <code>h1</code> tag like so:</p>\n<pre><code class=\"html language-html\">&lt;h1&gt;My vacation&lt;/h1&gt;\n</code></pre>\n<p>With this line, you're basically telling the browser:</p>\n<blockquote>\n  <p>Show me a title that says \"My vacation\".</p>\n</blockquote>\n<p>A paragraph can be written using the <code>p</code> tag. So to write our two paragraphs, we do this in HTML:</p>\n<pre><code class=\"html language-html\">&lt;p&gt;Last summer I went on vacation to the Greek islands or Rhodes and Crete. It was loads of fun&lt;/p&gt;\n\n&lt;p&gt;We went to the beach, ate tons of ice cream and enjoyed the sun so much that we got a little sunburned&lt;/p&gt;\n</code></pre>\n<p>So what if you want to add an image? </p>\n<p><img src=\"/assets/html-docwithimg.png\" alt=\"A basic document with a title, an image and two paragraphs\" /></p>\n<p>You can do this using the <code>img</code> tag:</p>\n<pre><code class=\"html language-html\">&lt;img src=\"https://upload.wikimedia.org/wikipedia/commons/0/01/Island_of_Crete%2C_Greece.JPG\" alt=\"Satellite image of Crete\" /&gt;\n</code></pre>\n<p>As you can see the <code>img</code> tag contains two more things you need to include: a <code>src</code> and an <code>alt</code>. With <code>src</code> you can tell it where to go and find the image. With <code>alt</code> you can add a description of the image so that people using assistive software know what the image contains.</p>\n<p>Add the <code>img</code> tag where you want the image to show up.</p>\n<p>Some other useful tags in HTML include:</p>\n<ul>\n<li><p><code>a</code> where you can add links to other web pages within your website or externally.</p></li>\n<li><p><code>ul</code> shows a list with bullet points. Each point is tagged as <code>li</code> within the <code>ul</code> tag.</p></li>\n<li><p><code>ol</code> is the same as <code>ul</code> but with numbers instead of bullet points.</p></li>\n<li><p><code>header</code> to tell the browser that this is the top header of the website, that usually contains the logo and the navigation.</p></li>\n</ul>\n<p>For a full list of tags, see <a href=\"https://www.w3schools.com/TAGS/default.ASP\">this page</a>.</p>\n<p>As I mentioned before, HTML doesn't only contain things that show on the page, it also contains information <em>about</em> the page that don't show up on the page itself.</p>\n<p>Stuff like what to show on the browser's tab, when a page opens. This is done with the <code>title</code> tag:</p>\n<pre><code class=\"html language-html\">&lt;title&gt;My vacation&lt;/title&gt;\n</code></pre>\n<p>So how do we differentiate between things that show up on the page and things that are <em>about</em> the page? This is where the <code>head</code> and <code>body</code> tags come in. This is how a complete HTML page looks like:</p>\n<pre><code class=\"html language-html\">&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n    &lt;title&gt;My vacation&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;h1&gt;My vacation&lt;/h1&gt;\n\n    &lt;p&gt;Last summer I went on vacation to the Greek islands or Rhodes and Crete. It was loads of fun&lt;/p&gt;\n\n    &lt;p&gt;We went to the beach, ate tons of ice cream and enjoyed the sun so much that we got a little sunburned&lt;/p&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\n<p>A few things to notice from the code above:</p>\n<ol>\n<li><p>The <code>&lt;!DOCTYPE html&gt;</code> line at the top that simply says: \"This is an HTML file\"</p></li>\n<li><p>The <code>&lt;html&gt;</code> tag that surrounds every other tag in the file</p></li>\n<li><p>the <code>&lt;head&gt;</code> tag that contains information about the page (like the <code>title</code>)</p></li>\n<li><p>the <code>&lt;body&gt;</code> tag that contains information that will be shown on the page (like the paragraphs and heading)</p></li>\n</ol>\n<p>And this is HTML in a nutshell!</p>\n<h2 id=\"learnmore\">Learn more</h2>\n<p>To learn more about HTML, check out these resources:</p>\n<p>[1] <a href=\"https://www.w3schools.com/html/default.asp\">HTML Tutorial - W3Schools</a></p>\n<p>[2] <a href=\"https://developer.mozilla.org/en-US/docs/Learn/HTML/Introduction_to_HTML\">Introduction to HTML - MDN Web Docs</a></p>",
        "series": "explained",
        "title": "HTML, explained.",
        "publishDate": "2022/01/09 17:57",
        "thumbnail": "html.png",
        "description": "HTML is the backbone of the web. So what is it? Let's explain!",
        "keywords": [
            "html",
            "web",
            "hypertext markup language"
        ],
        "twitterimage": "https://savvas.me/assets/html-tw.png"
    },
    {
        "slug": "if-statements",
        "content": "<p>What are <em>if statements</em> in programming?</p>\n<p>Another important building block of any programming, regardless of programming language.</p>\n<p>Every new programmer should therefore know about it. So what is it?</p>\n<p>If statements are basically a way of saying:</p>\n<blockquote>\n  <p>I want you to do something, but ONLY on certain specific circumstances.</p>\n</blockquote>\n<p>In other words, do something only if certain conditions are met.</p>\n<p>Let's see an example:</p>\n<p>Suppose you're writing a program. In that program, you're asking your user for their name so you can give them a personalised greeting:</p>\n<pre><code class=\"js language-js\">var name = prompt(\"What is your name?\")\nconsole.log(`Hello, ${name}`)\n</code></pre>\n<p>You're also asking your user for their age. You want to tell your user \"let's have a beer\", but only if they're 18 years or older.</p>\n<p>You can do this using \"if\" statements in your program.</p>\n<p>An if statement (depending on language) looks something like this:</p>\n<pre><code class=\"js language-js\">if(check){\n    // stuff to do if check passes\n}\n</code></pre>\n<p>So in our example, we want to say:</p>\n<blockquote>\n  <p>If the user is 18 years old or older, invite them for a beer</p>\n</blockquote>\n<p>The code in Javascript would look something like this:</p>\n<pre><code class=\"js language-js\">var age = prompt(\"How old are you\")\n\nif(age &gt;= 18){\n    console.log(\"Let's have a beer!\")\n}\n</code></pre>\n<p>If statements are otherwise called \"conditional statements\" because the if block is only executing when a certain \"condition\" is met.</p>\n<p>Using if statements, you can therefore control the flow of your program, depending on certain criteria.</p>\n<p>But what if we want to also do something if the check DOESN'T pass? Say for example, the user isn't 18 years or older?</p>\n<p>This is where the <code>else</code> comes in.</p>\n<p>In our case, we want to tell the user \"You're a bit too young to drink\" if they're under 18.</p>\n<p>This is what it looks like in Javascript:</p>\n<pre><code class=\"js language-js\">var age = prompt(\"How old are you\")\n\nif(age &gt;= 18){\n    console.log(\"Let's have a beer!\")\n}\nelse{\n    console.log(\"You're a bit too young to drink\")\n}\n</code></pre>\n<p>Thanks for reading this thread! 👋👋👋</p>",
        "series": "explained",
        "title": "if statements, explained.",
        "publishDate": "2021/09/07 14:33",
        "thumbnail": "ifstatements.png",
        "description": "A simple introduction to if statements in programming",
        "keywords": [
            "programming",
            "if statements",
            "if",
            "conditionals",
            "javascript"
        ],
        "twitterimage": "https://savvas.me/assets/ifstatements-tw.png"
    },
    {
        "slug": "iife",
        "content": "<p>What is IIFE (Immediately Invoked Function Expressions) in JavaScript?</p>\n<h2 id=\"letsexplain\">Let's explain!</h2>\n<p>So let's suppose you have a function. A simple function that prints \"Hello\" to the console:</p>\n<pre><code class=\"js language-js\">function sayHello(){\n    var message = \"Hello\"\n    console.log(message)\n}\n</code></pre>\n<p>You need to call the function as soon as it's defined, so you do what makes more sense:</p>\n<pre><code class=\"js language-js\">function sayHello(){\n    var message = \"Hello\"\n    console.log(message)\n}\n\nsayHello()\n</code></pre>\n<p>The function never needs to be called again after that. So you declare the function, call it and then never touch it again.</p>\n<p>What this means that the function and its defined variable <code>message</code> take space that isn't needed, in lines of code, memory or variable names.</p>\n<p>A better approach would be to structure a function in such a way that you don't need to name it. Just define it and run it immediately, and the function with its variables will disappear from your workspace after its run, clearing the way for more important things.</p>\n<p><strong>IIFEs</strong> or <em>Immediately Invoked Function Expressions</em> are the solution to this problem.</p>\n<p>IIFEs are the simplest way to create functions that run as soon they are defined. You don't even need to give them a name!</p>\n<p>Such a function is called an \"anonymous function\" because (you guessed it) it doesn't have a name.</p>\n<p>So how does it work?</p>\n<p>First, remove the name from the function:</p>\n<pre><code class=\"js language-js\">function (){\n    var message = \"Hello\"\n    console.log(message)\n}\n</code></pre>\n<p>Second, surround the function in brackets:</p>\n<pre><code class=\"js language-js\">(function (){\n    var message = \"Hello\"\n    console.log(message)\n})\n</code></pre>\n<p>This will define the function even if it doesn't have name. </p>\n<p>So now we need to run it as soon as it's defined so include a <code>()</code> at the end:</p>\n<pre><code class=\"js language-js\">(function (){\n    var message = \"Hello\"\n    console.log(message)\n})()\n</code></pre>\n<p>That's it! The code will define an anonymous function which declares a variable and prints a message to the console, executes it on the spot, then everything disappears.</p>\n<p>To show I mean by \"everything disappears\" see this code below. What will happen if I run it?</p>\n<pre><code class=\"js language-js\">(function (){\n    var message = \"Hello\"\n    console.log(message)\n})()\n\nconsole.log(message)\n</code></pre>\n<p>I will get the first \"Hello\" in the console because it's part of the function but then I'll get a \"message is not defined\" error because after the function is run the function and its variable is not available any more.</p>\n<p>I hope this article has made IIFEs easier to understand. Thank you for reading!</p>\n<h2 id=\"conversation\">Conversation</h2>\n<p>Have you ever used IIFEs? <a href=\"https://twitter.com/SavvasStephnds/status/1417819885342806021\">Join the conversation in the thread</a></p>",
        "series": "explained",
        "title": "Immediately Invoked Function Expressions (IIFE), explained.",
        "publishDate": "2021/07/26 14:33",
        "thumbnail": "iife.png",
        "description": "A simple introduction to Javascript Immediately Invoked Function Expressions",
        "keywords": [
            "javascript",
            "web development",
            "Immediately Invoked Function Expressions",
            "iife"
        ],
        "twitterimage": "https://savvas.me/assets/iife-tw.png"
    },
    {
        "slug": "javascript-dom",
        "content": "<p>The DOM, or <em>Document Object Model</em>, is a concept in Javascript that allows you to manipulate a website and add dynamic content. But what is it and how does it work?</p>\n<h2 id=\"letsexplain\">Let's explain!</h2>\n<p>Suppose you have a very basic website. It looks like this:</p>\n<p><img src=\"/assets/domexplained-page.png\" alt=\"\" /></p>\n<p>It's a very simple website with 5 <code>div</code>s. This is the HTML:</p>\n<pre><code class=\"html language-html\">&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n    &lt;meta charset=\"UTF-8\"&gt;\n    &lt;meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\"&gt;\n    &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"&gt;\n    &lt;title&gt;Document&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;div id=\"app\"&gt;\n        &lt;div&gt;One&lt;/div&gt;\n        &lt;div&gt;Two&lt;/div&gt;\n        &lt;div&gt;Three&lt;/div&gt;\n        &lt;div&gt;Four&lt;/div&gt;\n        &lt;div&gt;Five&lt;/div&gt;\n    &lt;/div&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\n<p>Now, as we know, Javascript adds interaction to our website. How does it do that?</p>\n<p>Let's say we need to add a button on our website, which sets the background colour of our website to black. How can we do this using Javascript?</p>\n<p><img src=\"/assets/domexplained-button.png\" alt=\"\" /></p>\n<pre><code class=\"diff language-diff\">&lt;body&gt;\n    &lt;div id=\"app\"&gt;\n        &lt;div&gt;One&lt;/div&gt;\n        &lt;div&gt;Two&lt;/div&gt;\n        &lt;div&gt;Three&lt;/div&gt;\n        &lt;div&gt;Four&lt;/div&gt;\n        &lt;div&gt;Five&lt;/div&gt;\n    &lt;/div&gt;\n+   &lt;button id=\"the-button\"&gt;Turn background black&lt;/button&gt;\n&lt;/body&gt;\n</code></pre>\n<p>To do anything on the page using Javascript, we need to have a representation of the website as Javascript objects. This way we can access the elements and run scripts on them.</p>\n<p>For example, to get the button, we can do this:</p>\n<pre><code class=\"js language-js\">let theButton = document.querySelector(\"#the-button\")\n</code></pre>\n<p>Or to get the <code>&lt;body&gt;</code> from the HTML, we can do this:</p>\n<pre><code class=\"js language-js\">let body = document.body\n</code></pre>\n<p>That way, we can set some Javascript code to run whenever the button is clicked:</p>\n<pre><code class=\"js language-js\">theButton.addEventListener(\"click\", () =&gt; {\n  // whatever goes here gets executed after the button is clicked\n})\n</code></pre>\n<p>Now we can get the body we declared above and set its background colour:</p>\n<pre><code class=\"diff language-diff\">theButton.addEventListener(\"click\", () =&gt; {\n+   body.style.backgroundColor = \"black\";\n})\n</code></pre>\n<p>If we now click the button, the background colour of the whole website will turn black! This is the type of interactivity (and much more) that is possible using Javascript.</p>\n<p>As you may have noticed we have a website built using HTML and a representation of it in Javascript so we can interact with it. In other words, Javascript contains a version of the HTML using <em>objects</em>!</p>\n<p>This is what we call the <strong>Document Object Model</strong>, or DOM.</p>\n<h2 id=\"astepfurther\">A step further</h2>\n<p>Now suppose we have a <code>div</code> within another <code>div</code>. Something like this:</p>\n<pre><code class=\"html language-html\">&lt;div id=\"outer\"&gt;\n  &lt;div id=\"inner\"&gt;Hello&lt;/div&gt;\n&lt;/div&gt;\n</code></pre>\n<p>If we need to access the inner <code>&lt;div&gt;</code>, there are two ways to do it:</p>\n<p>The first:</p>\n<pre><code class=\"js language-js\">var outer = document.querySelector(\"#outer #inner\")\n</code></pre>\n<p>Or the second way is to access the inner <code>&lt;div&gt;</code> <em>from the outer</em>:</p>\n<pre><code class=\"js language-js\">var outer = document.querySelector(\"#outer\")\nvar inner = outer.querySelector(\"#inner\")\n</code></pre>\n<p>This is because the DOM in structured sort-of like a tree, according to how you structure your HTML.</p>\n<p><img src=\"/assets/dom-tree.png\" alt=\"\" /></p>\n<p>This is it's called a \"DOM Tree\".</p>\n<h2 id=\"learnmore\">Learn more</h2>\n<p>To learn more about the DOM the Mozilla Developer Network has a <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Document_Object_Model/Introduction\">complete guide</a>.</p>",
        "series": "explained",
        "title": "The DOM, explained.",
        "publishDate": "2021/05/17 15:00",
        "thumbnail": "jsdom.png"
    },
    {
        "slug": "javascript-prototypes",
        "content": "<p>Suppose you decided to create a to-do app in Javascript.</p>\n<p>A great way to stay organised!</p>\n<p>For the to-do app to work you'll need to have your tasks as Javascript objects.</p>\n<p>Like this:</p>\n<pre><code class=\"js language-js\">{\n    \"title\": \"Make dinner\"\n    \"status\": \"COMPLETED\"\n}\n</code></pre>\n<p>A great way to make object creation easier, is to create a function that creates them for you:</p>\n<pre><code class=\"js language-js\">function Task(title, status){\n    this.title = title,\n    this.status = status\n}\n</code></pre>\n<p>So now, if you want to create a new task object, all you have to do is to call the function with the <code>new</code> keyword:</p>\n<pre><code class=\"js language-js\">var myTask = new Task(\"Make dinner\", \"COMPLETED\")\n</code></pre>\n<p>Because this function creates new objects, this type of function is called a \"constructor\".</p>\n<p>You can even include functions within the constructor, like this:</p>\n<pre><code class=\"js language-js\">function Task(title, status){\n    this.title = title,\n    this.status = status\n\n    this.isCompleted = function(){\n        return this.status === \"COMPLETED\"\n    }\n}\n</code></pre>\n<p>So you can call the function from the object:</p>\n<pre><code class=\"js language-js\">var myTask = new Task(\"Make dinner\", \"COMPLETED\")\nconsole.log(myTask.isCompleted())\n//&gt; true\n</code></pre>\n<p>To create an array of tasks, simply use the constructor:</p>\n<pre><code class=\"js language-js\">var tasks = [\n    new Task(\"Make dinner\", \"COMPLETED\"),\n    new Task(\"Take out the trash\", \"PENDING\"),\n]\n</code></pre>\n<p>To see how many tasks you have in your tasks array, just use the <code>length</code> variable:</p>\n<pre><code class=\"js language-js\">tasks.length\n//&gt; 2\n</code></pre>\n<p>But… hang on a minute! When did we define the <code>length</code> variable? I don't remember defining a constructor for the array! Where does the <code>length</code> variable come from?</p>\n<p>The answer is this: it has been borrowed from a list of variables and functions specific to arrays!</p>\n<p>This list of variables and functions that are brought over without you specifically defining them is called the Prototype.</p>\n<p>So for arrays, it has an Array Prototype which contains the functions you are familiar with:</p>\n<pre><code class=\"js language-js\">tasks.length\ntasks.forEach()\ntasks.map()\ntasks.push()\n</code></pre>\n<p>etc.</p>\n<p>So, how can you change the Prototype for my own objects?</p>\n<p>For example, I need to add another function to my Task objects:</p>\n<pre><code class=\"js language-js\">myTask.setAsCompleted()\n</code></pre>\n<p>You can set it with Prototypes:</p>\n<pre><code class=\"js language-js\">function Task(title, status){\n    this.title = title,\n    this.status = status\n\n    this.isCompleted = function(){\n        return this.status === \"COMPLETED\"\n    }\n}\n\nTask.prototype.setAsCompleted = function(){\n    this.status = \"COMPLETED\"\n}\n</code></pre>\n<p>So you can now easily set the status to COMPLETED:</p>\n<pre><code class=\"js language-js\">var task = new Task(\"Do the dishes\", \"NEW\")\n\nconsole.log(task.status)\n//&gt; NEW\n\ntask.setAsCompleted()\n\nconsole.log(task.status)\n//&gt; COMPLETED\n</code></pre>\n<p>And that's it! This is how prototypes work in Javascript!</p>",
        "series": "explained",
        "title": "Javascript Prototypes, explained.",
        "publishDate": "2021/10/14 14:33",
        "thumbnail": "jsproto.png",
        "description": "The concept of Javascript Prototypes, in simple terms",
        "keywords": [
            "programming",
            "javascript",
            "concepts",
            "prototypes",
            "constructors"
        ],
        "twitterimage": "https://savvas.me/assets/jsprototypes-tw.png"
    },
    {
        "slug": "javascript-scopes",
        "content": "<p>Scope in Javascript is basically where a variable or function can be accessed from after it has been declared.</p>\n<p>For example, a variable could only be accessed within an if statement, not outside it.</p>\n<p>See the code below:</p>\n<pre><code class=\"js language-js\">let x = 5\n\nif(x &gt; 3){\n    let y = 10\n}\n\nconsole.log(y)\n</code></pre>\n<p>Variable <code>y</code> is declared inside an <code>if</code> block. However, the code tries to access <code>y</code> OUTSIDE the <code>if</code> block. What would happen if we run this code?</p>\n<p>You would get this error:</p>\n<blockquote>\n  <p>\"Uncaught ReferenceError: y is not defined\".</p>\n</blockquote>\n<p>But why?</p>\n<p>Because <code>y</code> was created within the <code>if</code> block, using the <code>let</code> keyword, it can only be accessed within that <code>if</code> block.</p>\n<p>In other words, <code>y</code> can only be accessed within the SCOPE that exists between the curly brackets of your <code>if</code> statement</p>\n<pre><code class=\"js language-js\">let x = 5\n\nif(x &gt; 3){\n    // if block scope begins\n    let y = 10\n    // if block scope ends\n}\n\nconsole.log(y)\n</code></pre>\n<p>But what about variable <code>x</code>? <code>x</code> is declared outside of any blocks. It can therefore be accessed from anywhere, including <code>if</code> blocks and functions.</p>\n<p>In other words, <code>x</code> is a \"GLOBAL variable\".</p>\n<p>Scope sets limits to where variables and functions can be accessed. But why? What's the point of this?</p>\n<p>There are lots of benefits to taking advantage of scopes!</p>\n<ol>\n<li>Variables are only present where they're needed</li>\n</ol>\n<p>See the code below. If we need a date object inside an <code>if</code> statement, there's no point in expanding its usage outside the <code>if</code> block. </p>\n<p>This makes for more understandable code:</p>\n<pre><code class=\"js language-js\">let x = 5\n\nif(x &gt; 3){\n    let date = new Date() // This object is only needed within the if statement\n    console.log(date);\n}\n\nconsole.log(date); // Not needed here\n</code></pre>\n<ol start=\"2\">\n<li>Avoid naming collisions</li>\n</ol>\n<p>If we limit the scope of our variables, we can reuse them depending on context. See example below:</p>\n<pre><code class=\"js language-js\">let occasion = \"CHRISTMAS\"\n\nif(occasion === \"CURRENT\"){\n    let date = new Date()\n    console.log(date);\n}\n\nif(occasion === \"VALENTINES\"){\n    let date = new Date(\"2021/02/14\")\n    console.log(date);\n}\n\nif(occasion === \"CHRISTMAS\"){\n    let date = new Date(\"2021/12/25\")\n    console.log(date);\n}\n</code></pre>\n<p>Thanks for reading and I hope this makes Javascript scopes slightly easier.</p>",
        "series": "explained",
        "title": "Javascript Scopes, explained.",
        "publishDate": "2021/03/18 00:00",
        "thumbnail": "scope.png"
    },
    {
        "slug": "javascript",
        "content": "<p>Javascript is the part of a website that is responsible for responding to user actions. This can really make a website come to life! How does it do that?</p>\n<p>Any website must contain some content. The content of a website is handled by a language called <code>HTML</code>.</p>\n<p><a href=\"/explained/html\">HTML, explained</a></p>\n<p>For example, if you want to add a heading and a paragraph, underneath it</p>\n<p><img src=\"/assets/jse01.png\" alt=\"\" /></p>\n<p>the HTML would look like this:</p>\n<pre><code class=\"html language-html\">&lt;h1&gt;Hello&lt;/h1&gt;\n&lt;p id=\"my-name\"&gt;My name is Savvas&lt;/p&gt;\n</code></pre>\n<p>What a website looks like, is handled by another language called <code>CSS</code>.</p>\n<p><a href=\"/explained/css\">CSS, explained</a></p>\n<p>For example, if you want the paragraph (<code>&lt;p&gt;</code>) called <code>my-name</code> from above to have a red text, </p>\n<p><img src=\"/assets/jse02.png\" alt=\"\" /></p>\n<p>you would use CSS like this:</p>\n<pre><code class=\"css language-css\">#my-name{\n  color: red;\n}\n</code></pre>\n<p>Now suppose we want to make it so that whenever the user clicks a button, a box appears with a message.</p>\n<p>Can we do this in HTML? </p>\n<p>No, because HTML is responsible for the content of a page.</p>\n<p>Can we do this in CSS?</p>\n<p>No, because CSS is responsible with how a website looks.</p>\n<p>So what can we use? This is where <em>Javascript</em> comes in!</p>\n<h2 id=\"enterjavascript\">Enter Javascript</h2>\n<p>Javascript is the third and last of the languages for building websites. It's what adds interaction to a website.</p>\n<p>So let's do this!</p>\n<p>First of all, let's create a button the user can click on.</p>\n<p>Let's update our HTML first to add our button:</p>\n<pre><code class=\"diff language-diff\">&lt;h1&gt;Hello&lt;/h1&gt;\n&lt;p id=\"my-name\"&gt;My name is Savvas&lt;/p&gt;\n\n+ &lt;button&gt;Show me a message!&lt;/button&gt;\n</code></pre>\n<p><img src=\"/assets/jse03.png\" alt=\"\" /></p>\n<p>To use Javascript, let's create a file called <code>popup.js</code> which will contain our code for the popup.</p>\n<p>Next, we're going to add a line in our <code>&lt;head&gt;</code> of our HTML, to read the file:</p>\n<pre><code class=\"html language-html\">&lt;head&gt;\n    &lt;script src=\"popup.js\"&gt;&lt;/script&gt;\n&lt;/head&gt;\n</code></pre>\n<p>In the <code>popup.js</code> file, we're going to create a function which will show a popup when called. Let's call it <code>showPopup</code>:</p>\n<pre><code class=\"js language-js\">function showPopup(){\n\n}\n</code></pre>\n<p>Now, add something in our function to show the popup itself (or an <code>alert</code> in Javascript):</p>\n<pre><code class=\"js language-js\">function showPopup(){\n    alert(\"Hello!\")\n}\n</code></pre>\n<p>Now that our function is ready, let's tell our button that there's a function you want to execute when it's clicked.</p>\n<p>All we need to do is update our <code>&lt;button&gt;</code> element with an <code>onclick</code> which contains our function name:</p>\n<pre><code class=\"js language-js\">&lt;button onclick=\"showPopup()\"&gt;Show me a message!&lt;/button&gt;\n</code></pre>\n<p>And that's it!</p>\n<p>Now when the user clicks the button, a popup (alert) will appear saying \"Hello!\". </p>\n<video width=\"320\" height=\"240\" src=\"/assets/jse04.mov\" autoplay muted loop>\n</video>\n<p>Congratulations! You've added your first interaction to your website! You made your website come to life!</p>\n<p>Now there are lots of things you can do, like changing colours, adding and removing elements, even code entire games that are playable in your browser using Javascript!</p>\n<p>For a proper introduction to Javascript, I suggest this 3.5 hour free tutorial from freeCodeCamp:</p>\n<iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/PkZNo7MFNFg\" title=\"YouTube video player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe>\n<p>Thank you for reading!</p>",
        "series": "explained",
        "title": "Javascript, explained.",
        "publishDate": "2022/02/10 14:00",
        "thumbnail": "js.png",
        "description": "Javascript can really make your website come alive. So what is it?",
        "keywords": [
            "javascript",
            "programming",
            "web development",
            "fundamentals"
        ],
        "twitterimage": "https://savvas.me/assets/js-tw.png"
    },
    {
        "slug": "live-regions",
        "content": "<p>What are \"live regions\" and how can they make my interactive website more accessible?</p>\n<h2 id=\"letsexplain\">Let's explain</h2>\n<p>Let's suppose you've made a website. This website is interactive. There's a dropdown of programming languages and a Go button</p>\n<p>The Go button displays information about the selected language below.</p>\n<p>Demo: https://live-region-test.netlify.app/</p>\n<p>There is a problem however with how screen readers interpret this page.</p>\n<p>Notice what happens after the user clicks on the Go button:</p>\n<blockquote class=\"twitter-tweet\"><p lang=\"en\" dir=\"ltr\">There is a problem however with how screen readers interpret this page.<br><br>Notice what happens after the user clicks on the Go button: <a href=\"https://t.co/CRDrMR29sC\">pic.twitter.com/CRDrMR29sC</a></p>&mdash; Savvas Stephanides (@SavvasStephnds) <a href=\"https://twitter.com/SavvasStephnds/status/1422520443144187905?ref_src=twsrc%5Etfw\">August 3, 2021</a></blockquote>\n<script async src=\"https://platform.twitter.com/widgets.js\" charset=\"utf-8\"></script>\n<p>Nothing gets announced after the Go button is clicked. The screen reader user has no idea that the text below has been updated.</p>\n<p>How can we fix this?</p>\n<p>Let's have a look at the HTML code. The Javascript and CSS code have been left out because they're irrelevant.</p>\n<p>You can see the <code>&lt;select&gt;</code> tag which is the dropdown, the <code>&lt;button&gt;</code> element and a div with ID \"description\" which updates with the selected programming language details:</p>\n<pre><code class=\"html language-html\">&lt;div id=\"app\"&gt;\n    &lt;select id=\"language-selection\"&gt;\n        &lt;option value=\"none\"&gt;-- Select a language --&lt;/option&gt;\n        &lt;option value=\"javascript\"&gt;Javascript&lt;/option&gt;\n        &lt;option value=\"python\"&gt;Python&lt;/option&gt;\n        &lt;option value=\"java\"&gt;Java&lt;/option&gt;\n        &lt;option value=\"html\"&gt;HTML&lt;/option&gt;\n    &lt;/select&gt;\n\n    &lt;button id=\"go-button\"&gt;Go&lt;/button&gt;\n\n    &lt;div id=\"description\"&gt;\n        &lt;span id=\"text\"&gt;&lt;/span&gt;\n    &lt;/div&gt;\n&lt;/div&gt;\n</code></pre>\n<p>How can we make sure that every time the description changes, the changes get announced by the screen reader?</p>\n<p>We can solve this by using an ARIA \"live region\".</p>\n<p>With a live region, our HTML should look like this:</p>\n<pre><code class=\"html language-html\">&lt;div id=\"app\"&gt;\n    &lt;select id=\"language-selection\"&gt;\n        &lt;option value=\"none\"&gt;-- Select a language --&lt;/option&gt;\n        &lt;option value=\"javascript\"&gt;Javascript&lt;/option&gt;\n        &lt;option value=\"python\"&gt;Python&lt;/option&gt;\n        &lt;option value=\"java\"&gt;Java&lt;/option&gt;\n        &lt;option value=\"html\"&gt;HTML&lt;/option&gt;\n    &lt;/select&gt;\n\n    &lt;button id=\"go-button\"&gt;Go&lt;/button&gt;\n\n    &lt;div id=\"description\" role=\"region\" aria-live=\"polite\"&gt;\n        &lt;span id=\"text\"&gt;&lt;/span&gt;\n    &lt;/div&gt;\n&lt;/div&gt;\n</code></pre>\n<ul>\n<li>the <code>role=\"region\"</code> parts marks that specific area as significant</li>\n<li><code>aria-live</code> marks this area as \"live\", which is to say that it will be updated. </li>\n<li><code>\"polite\"</code> means announce the change only when the user isn't doing something else.</li>\n</ul>\n<p>So now our page would look something like this with a screen reader:</p>\n<blockquote class=\"twitter-tweet\"><p lang=\"en\" dir=\"ltr\">So now our page would look something like this with a screen reader: <a href=\"https://t.co/26BYsvsy47\">pic.twitter.com/26BYsvsy47</a></p>&mdash; Savvas Stephanides (@SavvasStephnds) <a href=\"https://twitter.com/SavvasStephnds/status/1422520480876142597?ref_src=twsrc%5Etfw\">August 3, 2021</a></blockquote>\n<script async src=\"https://platform.twitter.com/widgets.js\" charset=\"utf-8\"></script>\n<p>Now the screen reader announces to the user every time there's a change!</p>\n<p>And that's how live regions work. Thanks for reading!</p>",
        "series": "explained",
        "title": "ARIA live regions, explained.",
        "publishDate": "2021/08/03 14:00",
        "thumbnail": "a11y.png",
        "description": "What ARIA live regions are in accessibility",
        "keywords": [
            "html",
            "accessibility",
            "aria roles",
            "live regions",
            "button",
            "aria"
        ],
        "twitterimage": "https://savvas.me/assets/liveregions-tw.png"
    },
    {
        "slug": "memoization",
        "content": "<p>Is your function running slow?</p>\n<p>There is something you could, and should, do about it so that it runs faster.</p>\n<p>It's called \"memoization\". What is it and how does it work?</p>\n<p>Let's explain:</p>\n<p>Suppose you are developing an app that manages your users.</p>\n<p>That app is written in Javascript.</p>\n<p>In that app, there's a function that gets the user's details by their ID.</p>\n<p>Something like this:</p>\n<pre><code class=\"js language-js\">function getUserById(id){\n\n}\n</code></pre>\n<p>That function makes an API call which gets the user information from a database:</p>\n<pre><code class=\"js language-js\">async function getUserById(id){\n    return await axios.get(`https://api.myapp.com/users/${id}`).data\n}\n</code></pre>\n<p>So for example to get the user with ID <code>234</code>, you'd make this call to the function:</p>\n<pre><code class=\"js language-js\">async function runApp(){\n    let user = await getUserById(234)\n    console.log(user)\n}\n</code></pre>\n<p>Because this function makes API calls, it can sometimes get rather slow. </p>\n<p>Now, because of how the app works, you'd need to make several calls to the function with the same user ID.</p>\n<pre><code class=\"js language-js\">async function runApp(){\n    let user1 = await getUserById(234)\n    console.log(user)\n\n    let user2 = await getUserById(234)\n    console.log(user)\n}\n</code></pre>\n<p>Every time you make that call, it will make another request to the API so that it can give you the exact same result.</p>\n<p>This will waste time and data, especially if you're low in either of these.</p>\n<p>What if there was a way to optimise this function so that it doesn't need to make the same requests over and over again?</p>\n<p>You can do this, with a technique called \"Memoization\"!</p>\n<p>Memoization is basically a technique which stores the returned value of a function for specified arguments in an array, so that when the function is called again with the same arguments, it gets those values back much much faster.</p>\n<p>Let's go back to our <code>getUserById</code> function and try and make it faster:</p>\n<pre><code class=\"js language-js\">async function getUserById(id){\n    return await axios.get(`https://api.myapp.com/users/${id}`).data\n}\n</code></pre>\n<p>We'll start by creating an empty array which will contain our stored values from our function:</p>\n<pre><code class=\"js language-js\">let storedValues = []\n\nasync function getUserById(id){\n    return await axios.get(`https://api.myapp.com/users/${id}`).data\n}\n</code></pre>\n<p>Next, we're going to update <code>getUserById</code> so that it checks whether the result for a specific user ID is stored in <code>storedValues</code>:</p>\n<pre><code class=\"js language-js\">let storedValues = []\n\nasync function getUserById(id){\n    if(storedValues[id] === undefined){\n        return await axios.get(`https://api.myapp.com/users/${id}`).data\n    }\n}\n</code></pre>\n<p>Next, we'll update <code>getUserById</code> again so that if the value for a specific ID is stored in the <code>storedValues</code> array, it will return that value from the array and not perform an API request:</p>\n<pre><code class=\"js language-js\">let storedValues = []\n\nasync function getUserById(id){\n    if(storedValues[id] === undefined){\n        let user = await axios.get(`https://api.myapp.com/users/${id}`).data\n        return user\n    }\n    else{\n        return storedValues[id]\n    }\n}\n</code></pre>\n<p>Finally, the function will store the returned user details to the <code>storedValues</code> array for future use:</p>\n<pre><code class=\"js language-js\">let storedValues = []\n\nasync function getUserById(id){\n    if(storedValues[id] === undefined){\n        let user = await axios.get(`https://api.myapp.com/users/${id}`).data\n        storedValues[id] = storedValues\n        return user\n    }\n    else{\n        return storedValues[id]\n    }\n}\n</code></pre>\n<p>Now, when the function is called, it will only make a request once for each ID. Each request after that would be much much faster since we've stored the return data in the array.</p>\n<p>As a result, your app will perform much faster and your users will be much happier as a result!</p>",
        "series": "explained",
        "title": "Memoization, explained.",
        "publishDate": "2021/09/21 14:00",
        "thumbnail": "memoization.png",
        "description": "How to make your functions in Javascript run faster, using memoization",
        "keywords": [
            "javascript",
            "optimization",
            "functions",
            "speed",
            "memoization"
        ],
        "twitterimage": "https://savvas.me/assets/memoization-tw.png"
    },
    {
        "slug": "mongodb",
        "content": "<p>You've heard about MongoDB as a better alternative to SQL databases. You've even heard the term \"NoSQL\" being thrown around.</p>\n<p>So what is MongoDB anyway?</p>\n<h2 id=\"letsexplain\">Let's explain.</h2>\n<p>Suppose you are tasked to build a web service, where you give it an ID and it gives you back details about a user. These details include their home address and a list of hobbies. It would give you back a JSON file like so:</p>\n<pre><code class=\"json language-json\">{\n    \"id\": 105,\n    \"firstName\": \"Emily\",\n    \"lastName\": \"Matilda\",\n    \"address\": {\n        \"street\": \"101 High St\",\n        \"city\": \"Thurgarton\",\n        \"postCode\": \"NR11 6YD\"\n    },\n    \"hobbies\": [\"Running\", \"Painting\"]\n}\n</code></pre>\n<p>You obviously need to store this data somewhere. How would this work if you were to store this data in an SQL database?</p>\n<p>As this data looks quite complex, you'd need at least 3 tables in your SQL database:</p>\n<p>A <code>users</code> table for the basic info</p>\n<p><img src=\"/assets/mongodb-userstable.png\" alt=\"\" /></p>\n<p>An <code>address</code> table to store home address details</p>\n<p><img src=\"/assets/mongodb-addresstable.png\" alt=\"\" /></p>\n<p>A hobbies table to store the list of hobbies for each user.</p>\n<p><img src=\"/assets/mongodb-hobbiestable.png\" alt=\"\" /></p>\n<p>So if you request the user details for a specific ID, the web service would:</p>\n<ul>\n<li>Get the basic user details by ID (first name, last name)</li>\n<li>Get the home address details from the address table</li>\n<li>Get the hobbies list from the hobbies table</li>\n<li>Assemble everything into JSON, like above, and return it to the user.</li>\n</ul>\n<p>If this looks unnecessarily complex and slow to you, you'd be <em>right</em>!</p>\n<p>What if there was a database that can store data in a JSON format for me, so I don't have to do the whole conversion thing so my app is easier to code and also faster?</p>\n<h2 id=\"entermongodb\">Enter MongoDB!</h2>\n<p>MongoDB is a database that, instead of relying on SQL technology to store data, the data is stored as documents. </p>\n<p>So instead of storing each entry as a \"row\", like it happens in SQL, it is stored as a \"document\".</p>\n<p>So suppose we need to store the data for Emily, so if we search for the user by ID, it will give us the results in a <code>JSON</code> format, like above.</p>\n<p>In MongoDB, all we need to do is to store the data for Emily in a document, in the JSON format we want it to be returned!</p>\n<pre><code class=\"json language-json\">{\n    \"id\": 105,\n    \"firstName\": \"Emily\",\n    \"lastName\": \"Matilda\",\n    \"address\": {\n        \"street\": \"101 High St\",\n        \"city\": \"Thurgarton\",\n        \"postCode\": \"NR11 6YD\"\n    },\n    \"hobbies\": [\"Running\", \"Painting\"]\n}\n</code></pre>\n<p>So in your favourite programming language, you can just request the document and MongoDB will just give it back to you. </p>\n<p>That's it! No conversions, no slow processing of data!</p>\n<p>So not only is your data stored in a format that just makes sense, and your app is faster because it doesn't need to process the data, but because of this speed you can just store a HUMONGOUS amound of data.</p>\n<p>That is where the name Mongo comes from. It's short for Humongous! 😀</p>\n<p>Can't wait to get started? Visit the <a href=\"https://docs.mongodb.com/manual/tutorial/getting-started/\">MongoDB documentation to get started</a></p>",
        "series": "explained",
        "title": "MongoDB, explained.",
        "publishDate": "2021/11/17 9:30",
        "thumbnail": "mongodb.png",
        "description": "MongoDB is a document-based NoSQL database that is faster and easier to store data. What is it? Let's explain.",
        "keywords": [
            "mongo",
            "mongodb",
            "databases",
            "nosql",
            "document",
            "json"
        ],
        "twitterimage": "https://savvas.me/assets/mongodb-tw.png"
    },
    {
        "slug": "promises",
        "content": "<p>Promises in Javascript are a way of isolating something that will likely take a while to complete. Like getting content from another website, or a file</p>\n<p>See this code below:</p>\n<pre><code class=\"js language-js\">var hello = \"Hello world\"\nconsole.log(hello)\nvar number = 5\nvar numberSquared = 5 * 5\nconsole.log(numberSquared)\n</code></pre>\n<p>You would expect each line to be executed line by line. First, \"Hello world\" is stored in the \"hello\" variable, <em>THEN</em> it gets printed, <em>THEN</em> the number variable gets assigned to number 5, THEN it gets squared and FINALLY, the number 25 gets printed in the console. Makes sense!</p>\n<p>What if there's something that takes a bit longer to complete? Like getting data from an API? In languages like Python, you'd expect your program to freeze until it's completed!</p>\n<p>See the example Python code below:</p>\n<pre><code class=\"py language-py\">print(\"Getting info...\")\ndata = requests.get(\"https://api.example.com/data\")\nprint(\"Data retrieval complete!\")\nprint(data)\n</code></pre>\n<p>What you'd expect is that it will print \"Getting info…\", then freeze until the data from the API is retrieved, and once that's done, print \"Data retrieval complete\" + data.</p>\n<p>And that makes sense if you're running a program from a Terminal. It isn't that confusing to your user.</p>\n<p>Javascript however, is different. Javascript is made for the <em>browser</em>. If something goes wrong, it can affect the website, which in turn will confuse your visitors. Not something you want!</p>\n<p>What I mean is that if you made a request to an API with Javascript and your script gets stuck while it receives the data, your browser gets stuck as well. Buttons stop working, content stops loading, interactions grind to a halt until the API decides gives the data back.</p>\n<p>This is where Promises come in to save the day…</p>\n<p>Promises is essentially a way of saying:</p>\n<blockquote>\n  <p>\"Go get some data from this API. However, I'm not gonna sit here and wait for you because that could take a while and it would freeze my browser\"</p>\n</blockquote>\n<p>Promises is also a way of saying:</p>\n<blockquote>\n  <p>\"Go get some data from this API. I'm going to move on to the next line, BUT once you've got some data back, I want you to do THIS with them\"\n  Example:</p>\n</blockquote>\n<pre><code class=\"js language-js\">axios.get(\"https://api.example.com/data\")\n    .then((response) =&gt; {\n        console.log(response.data)\n        console.log(\"All done!\")\n    })\n\nconsole.log(\"JS is great!\")\n</code></pre>\n<p>What the example above essentially does:</p>\n<ul>\n<li>print \"Getting some data for you…\"</li>\n<li>print \"JS is great\"</li>\n<li>(once the data is back) print the data and then print \"All done!\"</li>\n</ul>\n<p>That way your browser doesn't freeze while fetching data. So Javascript is happy, your browser is happy, and (most importantly) your user is happy.</p>",
        "series": "explained",
        "title": "Javascript Promises, explained.",
        "publishDate": "2021/03/23 13:57",
        "thumbnail": "promise.png",
        "description": "Promises in Javascript are a way of isolating something that will likely take a while to complete. Here's how it works",
        "keywords": [
            "javascript",
            "promises",
            "web development"
        ],
        "twitterimage": "https://savvas.me/assets/promises-tw.png"
    },
    {
        "slug": "react-hooks",
        "content": "<p>Suppose you need to buy some new clothes.</p>\n<p>So you do what any person who do and begin shopping online.</p>\n<p>You stumble upon a shop called MyShop, which looks like this:</p>\n<p><img src=\"/assets/hook-homepage.png\" alt=\"\" /></p>\n<p>So you find something you fancy and click on the image to view details, like the price. </p>\n<p><img src=\"/assets/hook-item.png\" alt=\"\" /></p>\n<p>Once you're happy, you click on the Add to cart button.</p>\n<p>You notice that the item has been added to your shopping cart, immediately. No need to refresh the page.</p>\n<p><img src=\"/assets/hook-itemadded.png\" alt=\"\" /></p>\n<p>It's a very interactive website and you'll even get a peek of your shopping cart once you click on the cart icon.</p>\n<p><img src=\"/assets/hook-peek.png\" alt=\"\" /></p>\n<p>How can a website do this?</p>\n<p>Well, the simple answer is Javascript.</p>\n<p>The answer gets considerably more complex when you get into the details of what happens from the moment you click on the Add to cart button, to the moment the item shows up in the shopping cart at the top right.</p>\n<p>Specifically this is what you need to do to make this possible with vanilla Javascript:</p>\n<ul>\n<li>Bind the Add to cart button to a function</li>\n<li>This function would manually get the cart icon element and the popup element from the DOM.</li>\n<li>The new item would be added to an array</li>\n<li>The function would get the length of the array and update the number of items next to the icon</li>\n<li>Then it would manually generate new elements for each item in the shopping cart.</li>\n<li>Repeat for every new addition</li>\n</ul>\n<p>Seems like a long process and code would become complex and convoluted.</p>\n<p>As we know, React makes your life slightly easier as we explained in <a href=\"/explained/react\">\"React, explained\"</a>.</p>\n<p>So is there an easier way, using React, to make a more stable way to develop the cart functionality without so many manual steps?</p>\n<p>There is: </p>\n<h2 id=\"enterreacthooks\">Enter React Hooks!</h2>\n<p>React Hooks are a way of saying:</p>\n<blockquote>\n  <p>I'm gonna display this variable. Any time it changes, I will automatically change it as well without any additional steps.</p>\n</blockquote>\n<p>As a simple example, imaging a simple field where you enter your name.</p>\n<p><img src=\"/assets/hook-nameform.png\" alt=\"\" /></p>\n<p>While you type, the value gets displayed below the field.</p>\n<p><img src=\"/assets/hook-formgreet.png\" alt=\"\" /></p>\n<p>In React, the code for the form would look something like this:</p>\n<pre><code class=\"jsx language-jsx\">export default function App(){\n    return(&lt;div id=\"App\"&gt;\n            &lt;form&gt;\n                &lt;label for=\"name-input\"&gt;Name: &lt;/label&gt;\n                &lt;input id=\"name-input\" /&gt;\n            &lt;/form&gt;\n        &lt;/div&gt;)\n}\n</code></pre>\n<p>To do the greeting, all we need to do is to introduce something called <code>useState</code>. This is called a \"hook\":</p>\n<pre><code class=\"diff language-diff\">+import React, { useState } from \"react\"\n\nexport default function App(){\n    return(&lt;div id=\"App\"&gt;\n            &lt;form&gt;\n                &lt;label for=\"name-input\"&gt;Name: &lt;/label&gt;\n                &lt;input id=\"name-input\" /&gt;\n+               &lt;div id=\"greeting\"&gt;&lt;/div&gt;\n            &lt;/form&gt;\n        &lt;/div&gt;)\n}\n</code></pre>\n<p>The <code>useState</code> hook provides two things:</p>\n<ul>\n<li>The variable <code>name</code> which will contain the name</li>\n<li>A function <code>setName</code> that will change the value of the variable and update every element that consumes it:</li>\n</ul>\n<pre><code class=\"diff language-diff\">import React, { useState } from \"react\"\n\nexport default function App(){\n+   const [name, setName] = useState(\"\")\n    return(&lt;div id=\"App\"&gt;\n            &lt;form&gt;\n                &lt;label for=\"name-input\"&gt;Name: &lt;/label&gt;\n                &lt;input id=\"name-input\" /&gt;\n                &lt;div id=\"greeting\"&gt;&lt;/div&gt;\n            &lt;/form&gt;\n        &lt;/div&gt;)\n}\n</code></pre>\n<p><code>\"\"</code> within <code>useState</code> is just the initial value for the <code>name</code> variable.</p>\n<p>So how can we make it so an element displays the value of the variable, even if it changes?</p>\n<p>Using the <code>{}</code> syntax. Like this:</p>\n<pre><code class=\"diff language-diff\">-&lt;div id=\"greeting\"&gt;&lt;/div&gt;\n+&lt;div id=\"greeting\"&gt;Hello, {name}&lt;/div&gt;\n</code></pre>\n<p>Lastly, we'll use <code>setGreeting</code> within the <code>&lt;input&gt;</code> field to update the <code>name</code> value:</p>\n<pre><code class=\"diff language-diff\">-&lt;input id=\"name-input\" /&gt;\n+&lt;input id=\"name-input\" onChange={(event) =&gt; setGreeting(event.target.value)}/&gt;\n</code></pre>\n<p>And that's it! Now as you type, you'll get greeted below!</p>\n<p><img src=\"/assets/hook-formgreetalice.png\" alt=\"\" /></p>\n<p>So how would that work for our shopping cart?</p>\n<p>First, we create an empty array which will act as our shopping cart, using the <code>useState</code> hook:</p>\n<pre><code class=\"jsx language-jsx\">const cart = [cart, setCart] = useState([])\n</code></pre>\n<p>The number next to the cart icon will basically use the <code>.length</code> variable of the cart array:</p>\n<pre><code class=\"jsx language-jsx\">&lt;div id=\"cart-count\"&gt;{cart.length}&lt;/div&gt;\n</code></pre>\n<p>And the popup to peek at the shopping cart is basically the list of items:</p>\n<pre><code class=\"jsx language-jsx\">&lt;div id=\"cart-popup\"&gt;\n    cart.map((item) =&gt; {\n        return &lt;ul&gt;\n            &lt;h2&gt;{item.name}&lt;/h2&gt;\n            &lt;div&gt;{item.price}&lt;/div&gt;\n            &lt;button&gt;Remove item&lt;/button&gt;\n        &lt;/ul&gt;\n    })\n&lt;/div&gt;\n</code></pre>\n<p>Finally, the Add to cart button will trigger the <code>addItem</code> function to add the new item to the cart using the <code>setCart</code> function from our hook:</p>\n<pre><code class=\"jsx language-jsx\">&lt;button onClick={() =&gt; {\n    addItem(item)\n}}&gt;Add to cart&lt;/button&gt;\n\nfunction addItem(item){\n    cart = cart.push(item)\n    setCart(cart)\n}\n</code></pre>\n<p>That's it! Now every time the Add to cart button is clicked, the shopping cart will get updated!</p>\n<h2 id=\"whatsnext\">What's next?</h2>\n<p><code>useState</code> is just one of the hooks supported by React:</p>\n<ul>\n<li><code>useEffect</code></li>\n<li><code>useContext</code></li>\n<li><code>useReducer</code></li>\n</ul>\n<p>Check this <a href=\"https://reactjs.org/docs/hooks-overview.html\">page on Hooks</a> for a complete overview of hooks and how to even create your own one!</p>",
        "series": "explained",
        "title": "React Hooks, explained.",
        "publishDate": "2021/10/19 14:33",
        "thumbnail": "reacthooks.png",
        "description": "React Hooks are a simple way of adding interactivity to a website. But what is it?",
        "keywords": [
            "react",
            "hooks",
            "javascript",
            "web development"
        ],
        "twitterimage": "https://savvas.me/assets/reacthooks-tw.png"
    },
    {
        "slug": "react",
        "content": "<p>React is a framework that makes it easier to create complex web pages. How does it do that? </p>\n<p>Imagine you're developing a to-do app. Let's say you just need to display 4-5 tasks. Ignore functionality like adding, or marking tasks as complete. </p>\n<p>If we were to just write some static HTML, the code would look something like this:</p>\n<pre><code class=\"html language-html\">&lt;html&gt;\n    &lt;h1&gt;My To-do app&lt;/h1&gt;\n\n    &lt;h2&gt;Pending tasks&lt;/h2&gt;\n    &lt;div id=\"todo-list\"&gt;\n        &lt;ul&gt;\n            &lt;li&gt;\n                &lt;a href=\"/task/1\"&gt;Buy groceries&lt;/a&gt;\n                &lt;div&gt;Added 2 days ago&lt;/div&gt;\n                &lt;div&gt;Deadline: end of today&lt;/div&gt;\n            &lt;/li&gt;\n            &lt;li&gt;\n                &lt;a href=\"/task/2\"&gt;Wash the car&lt;/a&gt;\n                &lt;div&gt;Added today&lt;/div&gt;\n                &lt;div&gt;Deadline: this Sunday&lt;/div&gt;\n            &lt;/li&gt;\n            &lt;li&gt;\n                &lt;a href=\"/task/3\"&gt;Sign up for the gym&lt;/a&gt;\n                &lt;div&gt;Added today&lt;/div&gt;\n                &lt;div&gt;Deadline: this Friday&lt;/div&gt;\n            &lt;/li&gt;\n        &lt;/ul&gt;\n    &lt;/div&gt;\n&lt;/html&gt;\n</code></pre>\n<p>The tasks are included as part of an unordered list, or <code>&lt;ul&gt;</code>.</p>\n<p>Each list item <code>&lt;li&gt;</code> contains the title of the task, the date it has been added and the the deadline. So you can see that each item is slightly complex. </p>\n<p>Obviously, in real life, to-do lists aren't just hard-coded HTML. You will need to get the data from somewhere, like an array of JSON objects.</p>\n<p>Like this:</p>\n<pre><code class=\"js language-js\">var toDoItems = [\n    {\n        \"id\": 1,\n        \"title\": \"Buy groceries\",\n        \"added\": \"03/11/2020\",\n        \"deadline\": \"03/11/2020\"\n    },\n    {\n        \"id\": 2,\n        \"title\": \"Wash the car\",\n        \"added\": \"02/11/2020\",\n        \"deadline\": \"08/11/2020\"\n    },\n    {\n        \"id\": 3,\n        \"title\": \"Sign up for the gym\",\n        \"added\": \"03/11/2020\",\n        \"deadline\": \"06/11/2020\"\n    }\n]\n</code></pre>\n<p>We would then have to use Javascript in order to display the to-do items in exactly the same format as above.</p>\n<p>The code would look something like this:</p>\n<pre><code class=\"js language-js\">var toDoList = document.querySelector(\"#todo-list\")\nvar list = document.createElement(\"ul\")\n\ntoDoItems.forEach((item) =&gt; {\n    var title = document.createElement(\"a\")\n    title.href = \"/task/\" + item.id\n    title.innerText = item.title\n\n    var added = document.createElement(\"div\")\n    added.innerHTML = item.added\n\n    var deadline = document.createElement(\"div\")\n    deadline.innerHTML = item.deadline\n\n    var listItem = document.createElement(\"li\")\n    listItem.appendChild(title)\n    listItem.appendChild(added)\n    listItem.appendChild(deadline)\n\n    list.appendChild(listItem)\n})\n\ntoDoList.appendChild(list)\n</code></pre>\n<p>We can all agree that this looks ugly and nasty. Not what you had in mind when you needed some dynamic data for your website. And it gets worse with more complex pages. </p>\n<p>What if we could build complex dynamic user interfaces, but instead of spaghetti JS, we used something close to HTML?</p>\n<h2 id=\"enterreact\">Enter React!</h2>\n<p>React, as mentioned in its own documentation is \"a JavaScript library for building user interfaces\". And it's an accurate statement. It makes it a lot easier to create complex user interfaces. </p>\n<p>But how does it work? How can React make our ugly code above into something clearer and more comprehensive? </p>\n<p>In React we can do this:</p>\n<pre><code class=\"jsx language-jsx\">function App(){\n    return(\n        &lt;div id=\"App\"&gt;\n            &lt;h1&gt;My To-do app&lt;/h1&gt;\n\n            &lt;h2&gt;Pending tasks&lt;/h2&gt;\n            &lt;div id=\"todo-list\"&gt;\n                &lt;ul&gt;\n                    {toDoItems.map((item) =&gt; &lt;li&gt;\n                            &lt;a href={\"/task/\" + item.id}&gt;Buy groceries&lt;/a&gt;\n                            &lt;div&gt;Added: {item.added}&lt;/div&gt;\n                            &lt;div&gt;Deadline: {item.deadline}&lt;/div&gt;\n                        &lt;/li&gt;\n                    )}\n\n                &lt;/ul&gt;\n            &lt;/div&gt;\n        &lt;/div&gt;\n    )\n}\n</code></pre>\n<p>\"Hang on a minute\", I hear you say. \"Did we just… write simple HTML within Javascript? And then added additional Javascript ONLY when we need it?\"</p>\n<p>Well, yes we did! </p>\n<p>We defined a Javascript function and in that, we just wrote some HTML. And when we needed some more complex functionality, like looping through our to-do list, we just embedded some simple Javascript.</p>\n<p>Incredible isn't it?</p>\n<p>That's the power of React! </p>\n<p>This is how React makes developing complex user interfaces so simple. But that's not all… \nReact also enables you to tidy up your code. How?</p>\n<p>It enables you to break down your page's code into smaller, more manageable chunks! </p>\n<p>Let's say now you're building a portfolio website. You need to include a header, a list of your skills, and a list for your projects. In React, it would look something this:</p>\n<pre><code class=\"jsx language-jsx\">function App(){\n    return(\n        &lt;div id=\"portfolio-website\"&gt;\n\n            {/* Header chunk */}\n\n            &lt;header&gt;\n                Welcome to my portfolio website!\n            &lt;/header&gt;\n\n            {/* Skills chunk */}\n\n            &lt;section id=\"skills\"&gt;\n                &lt;h2&gt;My skills&lt;/h2&gt;\n                &lt;ul&gt;\n                    &lt;li&gt;HTML&lt;/li&gt;\n                    &lt;li&gt;CSS&lt;/li&gt;\n                    &lt;li&gt;Javascript&lt;/li&gt;\n                    &lt;li&gt;Python&lt;/li&gt;\n                    &lt;li&gt;Git&lt;/li&gt;\n                &lt;/ul&gt;\n            &lt;/section&gt;\n\n            {/* Projects chunk */}\n\n            &lt;section id=\"projects\"&gt;\n                &lt;ul&gt;\n                    &lt;li&gt;My to-do app&lt;/li&gt;\n                    &lt;li&gt;Tic-tac-toe game&lt;/li&gt;\n                    &lt;li&gt;Recipe website&lt;/li&gt;\n                &lt;/ul&gt;\n            &lt;/section&gt;\n        &lt;/div&gt;\n    )\n}\n</code></pre>\n<p>In React, you can store each of these sections in their own file.</p>\n<p>For example, the skills section can be its own file, and it would look like this:</p>\n<pre><code class=\"jsx language-jsx\">function Skills(){\n    return(\n        &lt;section id=\"skills\"&gt;\n            &lt;h2&gt;My skills&lt;/h2&gt;\n            &lt;ul&gt;\n                &lt;li&gt;HTML&lt;/li&gt;\n                &lt;li&gt;CSS&lt;/li&gt;\n                &lt;li&gt;Javascript&lt;/li&gt;\n                &lt;li&gt;Python&lt;/li&gt;\n                &lt;li&gt;Git&lt;/li&gt;\n            &lt;/ul&gt;\n        &lt;/section&gt;\n    )\n}\n</code></pre>\n<p>If all of our sections have their own files, we can then import them into our website like this:</p>\n<pre><code class=\"jsx language-jsx\">function App(){\n    return(\n        &lt;div id=\"portfolio-website\"&gt;\n\n            &lt;Header /&gt;\n\n            &lt;Skills /&gt;\n\n            &lt;Projects /&gt;\n\n        &lt;/div&gt;\n    )\n}\n</code></pre>\n<p>Look how clean our code has become!</p>\n<p>Each of these sections in their own files is what in React, we call \"components\".</p>\n<p>And even greater, is that we can also separate our CSS, making it much more manageable! \nSo how do you get started?</p>\n<p>First, you need NodeJS, which you can <a href=\"https://nodejs.org/\">download here</a>.</p>\n<p>Next, you need a package called \"create-react-app\" which you can get with this command:</p>\n<pre><code class=\"bash language-bash\">npm install -g create-react-app \n</code></pre>\n<p>Finally, you can create your first React app with this command:</p>\n<pre><code class=\"sh language-sh\">create-react-app my-app \n</code></pre>\n<p>Now point your terminal inside your app see how your app looks:</p>\n<pre><code class=\"sh language-sh\">cd my-app\nnpm start\n</code></pre>\n<p>That's it! Now that you have a basic knowledge of React, you can <a href=\"https://reactjs.org/docs/getting-started.html\">explore the official docs</a>!</p>\n<p>Have fun!</p>",
        "series": "explained",
        "title": "React, explained",
        "publishDate": "2021/03/26 10:27",
        "thumbnail": "react.png"
    },
    {
        "slug": "regex",
        "content": "<p>What are regular expressions? They are a great way of expressing patterns to help with matching and validation.</p>\n<p>But what does that mean?</p>\n<h2 id=\"letsexplain\">Let's explain!</h2>\n<p>So let's suppose you have a website. This website relies on user input.</p>\n<p>For example, you ask your users for their age:</p>\n<p><img src=\"/assets/regex-ageform.png\" alt=\"\" /></p>\n<p>You expect the input to be a <em>number</em> from <em>0 to 100</em>. This is something you need to check within your form. The easiest (and recommended) way is to use HTML tags in your form:</p>\n<pre><code class=\"html language-html\">&lt;form action=\"\"&gt;\n    &lt;label for=\"age\"&gt;Age: &lt;/label&gt;\n    &lt;input id=\"age\" type=\"number\" min=\"0\" max=\"100\"&gt;\n&lt;/form&gt;\n</code></pre>\n<p>So if you attempt to write a non-numeric input or a number below 0 or over 100, it will give you an error:</p>\n<p><img src=\"/assets/regex-formerror1.png\" alt=\"\" /></p>\n<p>Validation for numbers is pretty straightforward. What if you need to validate something more complex? </p>\n<p>Let's suppose your website asks for an ID. That ID is slightly complex. It has to follow these rules:</p>\n<ul>\n<li>The first 3 characters are capital letters</li>\n<li>Followed by 3 numeric characters</li>\n<li>Followed by a dash (-) symbol</li>\n<li>Followed by 4 letters, but this time lower case.</li>\n</ul>\n<p>So, for example, this is a valid ID: <code>ABC123-abcd</code></p>\n<p>This is invalid: <code>fre123-AbC</code>.</p>\n<p>To validate this, our website will have a Validate button:</p>\n<p><img src=\"/assets/regex-idform.png\" alt=\"\" /></p>\n<p>If the ID input is valid, a message will appear saying \"The ID is valid\". If not, a message \"The ID is invalid\" will appear.</p>\n<p>How can we validate the ID using Javascript?</p>\n<p>We can take the <strong>long</strong> route:</p>\n<ol>\n<li>Check the ID is 11 characters long</li>\n<li>If it is, get the 3 first letters. Check each one is a capital letter (A-Z)</li>\n<li>If that's true get the next 3 characters. Check each one is a number (0-9)</li>\n<li>If <em>that's</em> true, check if the 7th character is a dash</li>\n<li>Then if <em>that's</em> true, extract the last 4 characters and check if they are lower case letters.</li>\n</ol>\n<p>In case you didn't realise it, this is <em>a lot</em> of work for checking a string of characters.</p>\n<p>What if there was an easier way of saying:</p>\n<blockquote>\n  <p>This is the pattern I want the ID to follow. Please check if that's true</p>\n</blockquote>\n<p>…without going through all those steps? A more straightforward way of expressing the pattern needed?</p>\n<h2 id=\"enterregularexpressions\">Enter Regular Expressions</h2>\n<p>Regular expressions (or \"regex\" for short) is a way of expressing complex patterns like the one above in a single string.</p>\n<p>Because they can express patterns that are quite complex, regular expressions often look like an alien language.</p>\n<h2 id=\"regexforourid\">Regex for our ID</h2>\n<p>The regular expression for our ID looks like this:</p>\n<pre><code class=\"re language-re\">^[A-Z]{3}[0-9]{3}-[a-z]{4}$\n</code></pre>\n<p>Let's break it down:</p>\n<ul>\n<li><code>^</code> means \"the start of the line\"</li>\n<li><code>[A-Z]{3}</code> means \"3 capital letters from A-Z\"</li>\n<li><code>[0-9]{3}</code> means \"3 numbers from 0-9\"</li>\n<li><code>-</code> is a literal dash symbol</li>\n<li><code>[a-z]{4}</code> means \"4 lower case letters a-z\"</li>\n<li><code>$</code> means the end of the line.</li>\n</ul>\n<p>So basically the pattern we need. Sure it looks quite complex, but if you get the hang of regex, it will be a lot simpler than checking the validity of the ID any other way.</p>\n<h2 id=\"validatetheidinourwebsite\">Validate the ID in our website</h2>\n<p>Let's go back to our website. Let's first create a function that validates the ID input and shows a message:</p>\n<pre><code class=\"js language-js\">function validateId(){\n    let id = document.querySelector(\"#id\").value\n    let isValid = id.search(/^[A-Z]{3}[0-9]{3}-[a-z]{4}$/g) === 0\n    if(isValid){\n        document.querySelector(\"#message\").innerHTML = \"The ID is valid\"\n    }\n    else{\n        document.querySelector(\"#message\").innerHTML = \"The ID is invalid\"\n    }\n}\n</code></pre>\n<p>If we attach this to our button's click event, we'll get these on our page:</p>\n<p>For a valid ID:</p>\n<p><img src=\"/assets/regex-validregex.png\" alt=\"A message saying &quot;The ID is valid&quot; for a valid ID\" /></p>\n<p>For an invalid ID:</p>\n<p><img src=\"/assets/regex-invalidregex.png\" alt=\"A message saying &quot;The ID is invalid&quot; for an invalid ID\" /></p>\n<h2 id=\"learnmore\">Learn more</h2>\n<p>The purpose of this article is to introduce you to regular expressions with a simple explanation. To help you get started with regex,you can learn more about regular expressions, by checking the <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Regular_Expressions\">MDN guide</a>!</p>",
        "series": "explained",
        "title": "Regular expressions, explained",
        "publishDate": "2021/05/25 11:01",
        "thumbnail": "regex.png"
    },
    {
        "slug": "responsive-design",
        "content": "<p>People visit websites in a lot of different devices and in a lot of different ways.</p>\n<p>Some using their phones, some using their desktop computers, some using tablets.</p>\n<p>The clever thing to do to reach the most amount of people, is to make your website available for each one of these devices.</p>\n<p>How would you do that?</p>\n<p>One possible way is to create 2-3 separate websites, each keeping one device type in mind. For example, 1 website specific for phones and 1 website specific for desktops and tablets. And when someone comes to your website, figure out where they should go from the size of their screen.</p>\n<p>This is great and all, but there's a problem. You now have 2 separate independent websites to take care of. </p>\n<p>What if there was a way to have a single website, with a single code base, and just rearrange the items within it depending on the size of the screen?</p>\n<p>For example, when the user visits from a phone, hide the left-size menu in a hamburger icon?</p>\n<p>This is possible with a technique called Responsive Design, or Responsive Web Design.</p>\n<h2 id=\"whatisresponsivedesign\">What is responsive design?</h2>\n<p>Responsive design is a technique used within CSS, which allows you to style things on a website depending on the size of the screen of your user. This way you can have only one webpage that looks different for different devices!</p>\n<p>Responsive design makes use of a feature of CSS called \"<code>@media</code> queries\". It works like this:</p>\n<p>Suppose you want each heading (<code>h1</code>) to have a red colour. In CSS you can do it like this:</p>\n<pre><code class=\"css language-css\">h1{\n    color: red;\n}\n</code></pre>\n<p>Now suppose you want the headings to have a red colour, but <em>ONLY</em> if the user visits from their phone, let's say a screen less than 300 pixels wide. The way to express this size limitation in CSS is:</p>\n<pre><code class=\"css language-css\">@media(max-width: 300px){\n    /* CSS goes here */\n}\n</code></pre>\n<p>So, to put these together, to make the heading red for small screens, we can do:</p>\n<pre><code class=\"css language-css\">@media(max-width: 300px){\n    h1{\n        color: red;\n    }\n}\n</code></pre>\n<p>That's it! </p>\n<video width=\"320\" height=\"240\" src=\"/assets/responsive.mov\" autoplay muted loop>\n</video>\n<p>A common usage is to hide an navigation bar from a website</p>\n<video width=\"320\" height=\"240\" src=\"/assets/responsive-menu.mov\" autoplay muted loop>\n</video>\n<p>Here it is in CSS:</p>\n<pre><code class=\"css language-css\">nav{\n    display: none;\n}\n\n@media(min-width: 320px){\n    nav{\n        display: block;\n    }\n}\n</code></pre>\n<p>The code above essentially hides the <code>nav</code> element (the navigation menu) by default until the screen is 320 px or larger.</p>\n<h2 id=\"learnmore\">Learn more</h2>\n<p>To learn more about responsive web design:</p>\n<ul>\n<li><p><a href=\"https://www.w3schools.com/html/html_responsive.asp\">HTML Responsive Web Design</a> by W3Schools</p></li>\n<li><p><a href=\"https://www.smashingmagazine.com/2011/01/guidelines-for-responsive-web-design/\">Responsive Web Design - What It Is And How To Use It</a> by Smashing Magazine</p></li>\n</ul>",
        "series": "explained",
        "title": "Responsive design, explained.",
        "publishDate": "2022/01/27 14:33",
        "thumbnail": "rwd.png",
        "description": "A simple introduction to responsive design",
        "keywords": [
            "responsive web design",
            "responsive design",
            "web development",
            "css",
            "media queries"
        ],
        "twitterimage": "https://savvas.me/assets/rwd-tw.png"
    },
    {
        "slug": "serverless",
        "content": "<p>The Internet is home to millions and millions of websites.</p>\n<p>Some small, some large, some simple, some complex.</p>\n<p>Pretty much all of them however, live on computers called \"servers\".</p>\n<p>Some people who have websites choose to have their websites on their own servers.</p>\n<p>The vast majority of website owners, however, choose to store their websites on servers far away for convenience, which can be accessed online.</p>\n<p>If you want to run a website on a server, however, you'd need set everything up yourself:</p>\n<ul>\n<li>Choose an OS</li>\n<li>Update the package manager for the OS</li>\n<li>Install the programming language (eg. Node)</li>\n<li>Everything else that needs to be installed (eg. packages)</li>\n<li>Run the app</li>\n</ul>\n<p>If this sounds needlessly complicated, especially for smaller projects, then you're not alone.</p>\n<p>It's a painful task to install everything yourself and dealing with servers in general. Is there a better way?</p>\n<p>Now imagine you have an app you want to put on a server.</p>\n<p>Now imagine that, all you have to do is upload your code and it would just work. Wouldn't it be awesome?</p>\n<p>Is such a thing even possible?</p>\n<p>Yes it is.</p>\n<p>Enter: SERVERLESS</p>\n<h2 id=\"serverless\">Serverless</h2>\n<p>In recent years, providers of servers have realised that setting up your own servers has become a bit of a pain so they have come up with their own versions of \"serverless\".</p>\n<p>Suppose for example you have a Node app you need to push to a server.</p>\n<p>With serverless, all you need to do is choose your programming language, upload your code and click Run. </p>\n<p>This is it.</p>\n<p>No, really. This is it. </p>\n<p>The server configuration and other stuff is taken care of for you!</p>\n<p>Hang on a minute, I hear you ask. Doesn't \"server-less\" basically mean \"without servers\"?</p>\n<p>No. Let me explain.</p>\n<h2 id=\"whyisitcalledserverless\">Why is it called \"Serverless\"?</h2>\n<p>To help us understand why it's called \"serverless\", let's have a look at a similar common word: \"wireless\".</p>\n<p>Why is it called wireless? Because in order to connect you don't need wires of course? But what about the wire the connects your router to the wall? </p>\n<p>Or the series of cables lying on the bottom of the ocean connecting you everywhere?</p>\n<p>Sould it still be called \"wireless\"? YES! Because for day to day usage, you don't need to deal with cables!</p>\n<p>This is EXACTLY why it's called \"serverless\".</p>\n<p>You don't need to deal with servers for day to day usage. It's been taken care of it by the providers.</p>\n<p>And this is how serverless works. </p>\n<p>Let's see some providers now.</p>\n<h2 id=\"serverlessproviders\">Serverless providers</h2>\n<ul>\n<li><p><a href=\"https://aws.amazon.com/lambda/\">AWS Lambda</a></p></li>\n<li><p><a href=\"https://docs.microsoft.com/en-us/azure/azure-functions/\">Azure Functions</a></p></li>\n<li><p><a href=\"https://cloud.google.com/functions\">Google Cloud Functions</a></p></li>\n<li><p><a href=\"https://www.netlify.com/products/functions/\">Netlify Functions</a></p></li>\n</ul>",
        "series": "explained",
        "title": "Serverless, explained.",
        "publishDate": "2021/12/13 12:25",
        "thumbnail": "serverless.png",
        "description": "Serverless is the easiest way to take your project online. Let's explain what it is and how it works.",
        "keywords": [
            "devops",
            "serverless",
            "aws",
            "cloud computing",
            "azure",
            "google cloud"
        ],
        "twitterimage": "https://savvas.me/assets/serverless-tw.png"
    },
    {
        "slug": "svelte",
        "content": "<p>Have you ever heard of Svelte? If you have, you probably heard of it as an alternative to Javascript frameworks like React or Vue. If you haven't, this article will explain what it is.</p>\n<p>So what is Svelte and what makes it different from other frameworks?</p>\n<h2 id=\"letsexplain\">Let's explain!</h2>\n<p>So you're a developer and you need to create a complex user interface. Like, say, a game of Snake.</p>\n<p>Such a game is very complicated and will need lots of code to make it happen. Since it's a web game, you'll obviously use Javascript.</p>\n<p>Now if you think using vanilla Javascript is too much code for you, you can use a framework to make things easier like React or Vue. </p>\n<p>Both these frameworks help you build something complex with ease and once you build your project, you get some nice vanilla Javascript code you can host anywhere.</p>\n<p>One of the nicest things about React or Vue is how simply your web page reacts to changes. Changes in lists, or any other variables get picked up and shown on your page.</p>\n<p>However, there's a drawback to this. This mechanism (called the \"Virtual DOM\") that helps adapt to change, gets included in your bundled app. This means that it gets loaded whenever your user opens your app.</p>\n<p>This can make your app <em>super</em> slow. </p>\n<p>What if there was a better way? Something that more or less works like React or Vue but when the final product gets built, it gets rid of all the unnecessary stuff so that my app is faster for my users?</p>\n<h2 id=\"entersvelte\">Enter Svelte</h2>\n<p>Svelte is a Javascript framework for creating complex user interfaces. Unlike React or Vue, it has a radical new approach to building apps. It helps you build apps that are <em>much</em> faster, by removing unnecessary stuff that your user doesn't need to load while still maintaining the adaptability of other frameworks.</p>\n<p>Your user can therefore have a more pleasant experience!</p>\n<p>In most other ways apart from speed, Svelte works exactly the same way as React or Vue, so if you're familiar with those frameworks you'll feel right at home.</p>\n<ul>\n<li>If helps you separate your UI into components</li>\n<li>It works with Node and npm</li>\n<li>It helps you write plain HTML instead of complex vanilla Javascript.</li>\n</ul>\n<h2 id=\"learnmore\">Learn more</h2>\n<p>To get started with Svelte, their website has a straightforward easy to follow tutorial:</p>\n<p><a href=\"https://svelte.dev/tutorial\">Svelte tutorial</a></p>\n<p>Also check out this article which explains why Svelte is a better choice for a Javascript framework:</p>\n<p><a href=\"https://svelte.dev/blog/frameworks-without-the-framework\">Frameworks without the framework: why didn't we think of this sooner?\n</a></p>\n<p>Now let's go ahead and give our users a better experience by building faster web applications with Svelte!</p>",
        "series": "explained",
        "title": "Svelte, explained.",
        "description": "Svelte is a Javascript framework that helps you build blazing fast web applications. This is Svelte explained.",
        "thumbnail": "svelte.png",
        "publishDate": "2021/06/30 11:00",
        "keywords": [
            "svelte",
            "sveltejs",
            "javascript",
            "ui",
            "interactive",
            "web apps",
            "fast"
        ],
        "twitterimage": "https://savvas.me/assets/tw-svelte.png"
    },
    {
        "slug": "tdd",
        "content": "<p>What is <em>TEST DRIVEN DEVELOPMENT (TDD)</em>?</p>\n<h2 id=\"letsexplain\">Let's explain! 🧵👇</h2>\n<p>Let's say you are creating an app. Part of the app is a function for figuring out whether a number is odd or even.</p>\n<p>Your function should look something like this:</p>\n<pre><code class=\"js language-js\">function oddOrEven(number){\n    if (number % 2 == 0){\n        return \"EVEN\"\n    }\n    else {\n        return \"ODD\"\n    }\n}\n</code></pre>\n<p>You check to see if this function returns the correct values, so you quickly run a couple of checks in the console:</p>\n<pre><code>oddOrEven(6)\n&gt;&gt;&gt; EVEN\n\noddOrEven(43)\n&gt;&gt;&gt; EVEN\n</code></pre>\n<p>But since you need some more permanent checks for your function which you can run whenever you need with a single command, you write some unit tests:</p>\n<pre><code class=\"js language-js\">test(\"evenOrOdd returns EVEN when even number is given\", () =&gt; {\n    var result = evenOrOdd(66)\n    expect(result).toBe(\"EVEN\")\n})\n\ntest(\"evenOrOdd returns ODD when odd number is given\", () =&gt; {\n    var result = evenOrOdd(83)\n    expect(result).toBe(\"ODD\")\n})\n</code></pre>\n<p>Now you realise that when you give this function a decimal like \"4.3\" it returns \"ODD\". This is wrong since decimal numbers can be neither odd or even. So you fix your function to include this special case:</p>\n<pre><code class=\"js language-js\">function oddOrEven(number){\n    if(number % 1 !== 0){\n        return \"NONE\"\n    }\n    else if (number % 2 == 0){\n        return \"EVEN\"\n    }\n    else {\n        return \"ODD\"\n}\n</code></pre>\n<p>Without bothering with writing unit tests, you move on to the next feature of your function: throwing an error when the input is a string.</p>\n<pre><code class=\"js language-js\">if(isNaN(number)){\n        throw “Input must be a number”\n    }\n    if(number % 1 !== 0){\n        return \"NONE\"\n    }\n    else if (number % 2 == 0){\n        return \"EVEN\"\n    }\n    else {\n        return \"ODD\"\n    }\n}\n</code></pre>\n<p>But there's a problem. You are now left with at least one change to your function that is left untested. Two if you count both the decimal check and the string check.</p>\n<p>It makes sense that you'd want to just get the function working and once it does, move on to the next feature, without bothering with writing unit tests.</p>\n<p>You need a change in the way you work to \"push\" you to write as many tests as possible to cover as much code as possible.</p>\n<p>🧪 This is where TEST DRIVEN DEVELOPMENT (or TDD) becomes useful! 🧪</p>\n<p>TDD works this way:</p>\n<p>🧪 Before you write any code, write the test FIRST</p>\n<p>🧪 Run the tests and watch the latest test fail (obviously)</p>\n<p>🧪 Write just enough code to make the test pass</p>\n<p>🧪 Rerun the test to see it pass</p>\n<p>🧪 Fix the code. Repeat.</p>\n<p>If you follow this way every time you make a small change, you'll make sure you write tests and not leave it for after you've completed the feature. Chances are, you'll be satisfied by the function working you'll leave the unit tests out.</p>\n<p>So suppose we're back to our function before the decimal check:</p>\n<pre><code class=\"js language-js\">function oddOrEven(number){\n    if (number % 2 == 0){\n        return \"EVEN\"\n    }\n    else {\n        return \"ODD\"\n    }\n}\n</code></pre>\n<p>Now BEFORE we make any changes, we write our test:</p>\n<pre><code class=\"js language-js\">test(\"evenOrOdd returns NONE when input is decimal\", () =&gt; {\n    var result = evenOrOdd(5.2)\n    expect(result).toBe(\"NONE\")\n})\n</code></pre>\n<p>Now obviously the test will fail because the function falsely returns \"ODD\":</p>\n<pre><code>❌  evenOrOdd returns NONE when input is decimal\n    Expected \"NONE\" but got \"ODD\"\n</code></pre>\n<p>That is perfectly OK. Now we have a clear goal: make the test pass. NOW we can update our code:</p>\n<pre><code class=\"js language-js\">function oddOrEven(number){\n    if(number % 1 !== 0){\n        return \"NONE\"\n    }\n    else if (number % 2 == 0){\n        return \"EVEN\"\n    }\n    else {\n        return \"ODD\"\n}\n</code></pre>\n<p>Now if we run our tests again, our latest test should pass!</p>\n<p>Now we have our new functionality AND a unit test ready for us!</p>\n<pre><code>✅ evenOrOdd returns NONE when input is decimal\n</code></pre>\n<p>Same can be done for our string or any other change coming.</p>\n<p>Thank you for reading!</p>",
        "series": "explained",
        "title": "Test-driven Development, explained.",
        "publishDate": "2021/07/29 14:00",
        "thumbnail": "tdd.png",
        "description": "A very simple jargon-free introduction to Test-Driven Development",
        "keywords": [
            "unit testing",
            "test-driven development",
            "javascript",
            "tdd"
        ],
        "twitterimage": "https://savvas.me/assets/tdd-tw.png"
    },
    {
        "slug": "type-coercion",
        "content": "<p>Type coercion in Javascript can cause a lot of confusion and unpredicted behaviour.</p>\n<p>So what is it?</p>\n<h2 id=\"letsexplain\">Let's explain</h2>\n<p>Type coercion in Javascript is a fancy way of basically saying:</p>\n<blockquote>\n  <p>If you're trying to compare two things with <code>==</code> that aren't the same type, try to make them the same type before comparing them.</p>\n</blockquote>\n<p>Take this code example:</p>\n<pre><code class=\"js language-js\">if (1 == 1){\n    console.log(\"Both sides are equal\")\n}\n</code></pre>\n<p>Obviously this statement will print <code>\"Both sides are equal\"</code> to the console. Why?</p>\n<p>Because both sides are equal to <code>1</code>.</p>\n<p>And they're both numbers.</p>\n<p>Now, how about this?</p>\n<pre><code class=\"js language-js\">if (1 == \"1\"){\n    console.log(\"Both sides are equal\")\n}\n</code></pre>\n<p>Both sides are equal to <code>1</code>, but the right side has quotes around it.</p>\n<p>This means that the left and right sides are different types (integer and string).</p>\n<p>What will happen in this case?</p>\n<p>Once again, this statement will print <code>\"Both sides are equal\"</code> to the console.</p>\n<p>But why?</p>\n<p>Because of a concept in Javascript called <strong>Type Coercion</strong>.</p>\n<p>In the case of our example, before performing the equality check, Javascript will try to convert one type into the other.</p>\n<p>The integer on the left will be converted to a string.</p>\n<p>Basically it'd be the same as this:</p>\n<pre><code class=\"js language-js\">if (\"1\" == \"1\"){\n    console.log(\"Both sides are equal\")\n}\n</code></pre>\n<p>Let's have a look at a different example:</p>\n<pre><code class=\"js language-js\">if (1 == true){\n    console.log(\"Both sides are equal\")\n}\n</code></pre>\n<p>The left side is an integer, the right side is a boolean. What will happen in this case?</p>\n<p>Javascript will try to convert the integer into a boolean. If the integer is <code>1</code>, it will be converted to <code>true</code>. </p>\n<p>If it's <code>0</code> it will be converted to <code>false</code>.</p>\n<p>So it's basically like doing this:</p>\n<pre><code class=\"js language-js\">if (true == true){\n    console.log(\"Both sides are equal\")\n}\n</code></pre>\n<p>Once again, <code>\"Both sides are equal\"</code> will be printed to the console.</p>\n<p>This behaviour can be rather strange and unpredictable, so how can we avoid this?</p>\n<p>How can we make sure that the check only returns true if boths sides are equal AND they are of the same type?</p>\n<p>With something called <em>\"STRICT EQUALITY\"</em>.</p>\n<p>This can be done with adding 3 equal signs instead of two (<code>===</code>).</p>\n<p>For example:</p>\n<pre><code class=\"js language-js\">if (1 === \"1\"){\n    console.log(\"Both sides are equal\")\n}\n</code></pre>\n<p>In this case, nothing gets converted (or coerced) so the check is much more strict.</p>\n<p>Nothing will be printed to the console because the two sides are of different types.</p>\n<p>It is highly recommended to use strict equality in your code to avoid unpredictable behaviour.</p>\n<p>And this concludes this explanation on Type Coercion. Thank you for reading.</p>",
        "series": "explained",
        "title": "Type coercion in Javascript, explained.",
        "publishDate": "2021/09/02 09:00",
        "thumbnail": "typecoercion.png",
        "description": "A simple explaination of the Javascript concept known as type coercion",
        "keywords": [
            "javascript",
            "equality",
            "type coercion"
        ],
        "twitterimage": "https://savvas.me/assets/typecoercion-tw.png"
    },
    {
        "slug": "typescript",
        "content": "<p>What is TypeScript? You've heard about it as the perfect companion to Javascript. But what is it and how does it work?</p>\n<h2 id=\"letsexplain\">Let's explain!</h2>\n<p>Take a look at this Javascript code:</p>\n<pre><code class=\"js language-js\">var number1 = 5\nvar number2 = 10\n\nvar sum = number1 + number2\n\nconsole.log(sum)\n</code></pre>\n<p>What is the output of the code? </p>\n<p>If your answer is 15 then you're right! You have two numbers, <code>number1</code> and <code>number2</code>. If you add them together using the <code>+</code> sign, it will give you the total because they're both numbers!</p>\n<p>Now take a look at this:</p>\n<pre><code class=\"js language-js\">var number1 = \"5\"\nvar number2 = \"10\"\n\nvar sum = number1 + number2\n\nconsole.log(sum)\n</code></pre>\n<p>This time <code>number1</code> and <code>number2</code> are strings. So what will this code give as output? </p>\n<p>If your answer is <code>\"510\"</code> as a string, then you're right again!</p>\n<p>But that's not how you expect it to work. </p>\n<p>I want <code>number1</code>, <code>number2</code>, and <code>sum</code> to all be numbers so that <code>sum</code> gives me the actual sum every time.</p>\n<p>Wouldn't it be nice if we could put some rules in so that we're absolutely <em>CERTAIN</em> that <code>number1</code>, <code>number2</code> and <code>sum</code> are ALWAYS numbers?</p>\n<p>Let's look at another example:</p>\n<p>Suppose, this time, we want to divide two numbers together:</p>\n<pre><code class=\"js language-js\">var number1 = 10\nvar number2 = 2\n\nvar result = number1 / number2\n\nconsole.log(result)\n</code></pre>\n<p>The result of the above is (as you'd expect), <code>5</code>. But what if instead of a number, <code>number2</code> is a string, or an array?</p>\n<pre><code class=\"js language-js\">var number1 = 10\nvar number2 = []\n\nvar result = number1 / number2\n\nconsole.log(result)\n</code></pre>\n<p>What would you expect it to happen here? </p>\n<p>If your answer is \"it would give me an error\" then you'd be wrong. The result would be \"Infinity\". But that is non-sense! </p>\n<p>There should be some rule in place that says \"you can only divide numbers with numbers\". Wouldn't that be nice?</p>\n<p>Enter <strong>TypeScript</strong>!</p>\n<p><img src=\"/assets/ts-logo.png\" alt=\"\" /></p>\n<p><em>TypeScript</em> is a language that is basically <em>extended Javascript</em>. </p>\n<p>In essence, TypeScript allows you to write Javascript so that when you declare variables or functions, you can also specify what <em>type</em> each of them are (string, number, array etc).</p>\n<p>For example:</p>\n<p>\"I want to create a variable called <code>total</code> which is a number\":</p>\n<pre><code class=\"ts language-ts\">var total:number = 5\n</code></pre>\n<p>\"I want to create a variable <code>name</code> which is a string\":</p>\n<pre><code class=\"ts language-ts\">var name:string = \"Savvas\"\n</code></pre>\n<p>\"I want to create a function <code>getTotal</code> which should <em>always</em> get a number array as input and <em>always</em> return a number\":</p>\n<pre><code class=\"ts language-ts\">function getTotal(values:number[]):number{\n    return values.reduce((accumulator, currentValue) =&gt; {\n        accumulator + currentValue\n    })\n}\n</code></pre>\n<p>So what would happen if I write a string in the total variable in my TypeScript (.ts) file, since it expects a number? </p>\n<pre><code class=\"ts language-ts\">var total:number = \"ABC\"\n</code></pre>\n<p>This:</p>\n<p><img src=\"/assets/ts-error.png\" alt=\"An error: Type 'string' is not assignable to type 'number'\" /></p>\n<p>This is what's so amazing about TypeScript. It tells you that what you're assigning is wrong before you even hit save! <strong>That means this error never makes it to your users, and it makes fixing errors a lot LOT easier!</strong></p>\n<h2 id=\"sohowdoigetstarted\">So how do I get started?</h2>\n<p>You can install TypeScript using via NPM:</p>\n<pre><code>npm install -g typescript\n</code></pre>\n<p>You can then turn a TypeScript (<code>.ts</code>) file into a Javascript (<code>.js</code>) file by running this command:</p>\n<pre><code class=\"sh language-sh\">npx tsc myfile.ts\n</code></pre>\n<p>You can then attach your JS file to your HTML as normal!</p>\n<p>This thread only touches the absolute basics of TypeScript but you can learn a lot more on the <a href=\"https://typescriptlang.org/docs\">TypeScript official documentation</a> which is quite comprehensive!</p>\n<p>Enjoy!</p>",
        "series": "explained",
        "title": "Typescript, explained.",
        "publishDate": "2021/05/12 14:00",
        "thumbnail": "typescript.png"
    },
    {
        "slug": "unit-testing",
        "content": "<p>You’ve heard about it, heard people talk about it, people swear by it. But what is it?</p>\n<p>Let's explain…</p>\n<p>Let's say you're building an app. An app that needs to know whether a number is even or odd.</p>\n<p>The function is quite straightforward for whole numbers:</p>\n<pre><code class=\"js language-js\">function oddOrEven(number){\n    if (number % 2 == 0){\n        return \"EVEN\"\n    }\n    else {\n        return \"ODD\"\n    }\n</code></pre>\n<p>Now how do you test to see if this works as it should? If you’re like most programmers, you open a console and call the function:</p>\n<pre><code class=\"sh language-sh\">oddOrEven(44)\n&gt;&gt; ODD\noddOrEven(85)\n&gt;&gt; EVEN\n</code></pre>\n<p>Great! Seems to work fine!</p>\n<p>Now there’s a problem with the function. What if the <code>number</code> input is not a whole number? Something like <code>4.2</code>? In mathematics, decimal numbers are neither even or odd but if we try our function:</p>\n<pre><code class=\"sh language-sh\">oddOrEven(4.2)\n&gt;&gt; ODD\n</code></pre>\n<p>That’s not right!</p>\n<p>So we add a special case for decimal numbers:</p>\n<pre><code class=\"js language-js\">function oddOrEven(number){\n    if(number % 1 !== 0){\n        return \"NONE\"\n    }\n    else if (number % 2 == 0){\n        return \"EVEN\"\n    }\n    else {\n        return \"ODD\"\n    }\n}\n</code></pre>\n<p>Again, we do a quick test in our console to check if it's correct:</p>\n<pre><code class=\"sh language-sh\">oddOrEven(4.2)\n&gt;&gt; NONE\n</code></pre>\n<p>Excellent!</p>\n<p>Now to make sure we haven't broken anything since our last change, we check the function against a whole number again:</p>\n<pre><code class=\"sh language-sh\">oddOrEven(12)\n&gt;&gt; EVEN\n\noddOrEven(501)\n&gt;&gt; ODD\n</code></pre>\n<p>Great! Still works!</p>\n<p>Now what if the function gets given something other than a number? Say, a string? You need to extend your function so it throws an error if this happens:</p>\n<pre><code class=\"js language-js\">function oddOrEven(number){\n    if(isNaN(number)){\n        throw \"Input must be a number\"\n    }\n    if(number % 1 !== 0){\n        return “NONE”\n    }\n    else if (number % 2 == 0){\n        return “EVEN”\n    }\n    else {\n        return “ODD”\n    }\n}\n</code></pre>\n<p>You test and it works fine. Now you need to test your function for all other conditions to make sure nothing is broken:</p>\n<ul>\n<li><p>when you give it an odd number</p></li>\n<li><p>when you give it an even number</p></li>\n<li><p>when you give it a decimal</p></li>\n<li><p>when you give it a string</p></li>\n</ul>\n<p>As you may have noticed, the list of checks you need to do for every small change is getting bigger and bigger. </p>\n<p>This is when you need something that can automate this for your whole app, which can run several tests with a single command.</p>\n<p>🧪 UNIT TESTS do exactly that! 🧪</p>\n<p>All languages have what we call \"unit testing frameworks\". Tools that run tests like the ones I mentioned with a single command.</p>\n<p>All you need is to install the tool, write your tests in \"test files\" and that’s it! Every time you run the appropriate command, all tests are run!</p>\n<p>What are these tools called? That would depend on the programming language used. Here are some examples:</p>\n<ul>\n<li><p>Javascript: Mocha, Jasmine, Jest</p></li>\n<li><p>Python: PyTest, testing</p></li>\n<li><p>Java: JUnit</p></li>\n<li><p>R: testThat</p></li>\n</ul>\n<p>For details on how to use each one, check the documentation for the language you’re using.</p>\n<p>For example this is a test in Jest (Javascript testing framework), which checks if <code>evenOrOdd</code> returns \"EVEN\" when an even number is given:</p>\n<pre><code class=\"js language-js\">test(\"evenOrOdd returns EVEN when even number is given\", () =&gt; {\n    var result = evenOrOdd(66)\n    expect(result).toBe(\"EVEN\")\n})\n</code></pre>\n<p>You can run this test plus any other test you write the same way, with the <code>jest</code> command in your console!</p>\n<p>With unit testing, your app is more likely to be bug free, because of better, more thorough testing.</p>\n<p>🧪 Better testing means</p>\n<p>👩\u200d💻 happier developers,</p>\n<p>💻 better apps,</p>\n<p>😃 happier users!</p>\n<p>Enjoy writing better apps!</p>",
        "series": "explained",
        "title": "Unit testing, explained",
        "publishDate": "2021/04/27 15:30",
        "thumbnail": "tube.png",
        "description": "The best way to make sure your program works as it should. So what is it? Let's explain.",
        "keywords": [
            "unit testing",
            "testing",
            "programming",
            "software development"
        ],
        "twitterimage": "https://savvas.me/assets/unittesting-tw.png"
    },
    {
        "slug": "variables",
        "content": "<p>What is a <em>VARIABLE</em> in programming?</p>\n<p>Variables are one of the basic building blocks of any program, app or website, no matter the programming language.</p>\n<p>So what are they?</p>\n<h1 id=\"letsexplain\">Let's explain!</h1>\n<p>Variables in programming are essentially a way of storing information that may be used later within the program.</p>\n<p>This information could be text, numbers, dates of a list of items.</p>\n<p>Suppose you write a program. You want this program to give a personalised welcome message to your user, by using their name.</p>\n<p>A great way to do this is by storing the user's name as a <em>variable</em>. You can then use that variable to display the welcome message.</p>\n<p>For example, this is a common way to store a text variable (for example, a name) in Javascript:</p>\n<pre><code class=\"js language-js\">var name = \"Savvas\"\n</code></pre>\n<p>As you may have noticed, variables are usually declared using a name on the left side, then an equal sign, followed by the actual value of the variable.</p>\n<p>Some more info may be needed depending on the language (such as <code>var</code> for \"variable\" in Javascript)</p>\n<p>So you could then use it to display a welcome message to your user:</p>\n<pre><code class=\"js language-js\">var name = \"Savvas\"\n\nconsole.log(`Welcome ${name}`)\n</code></pre>\n<p>This is especially useful, when you ask your user to type their name:</p>\n<pre><code class=\"js language-js\">var name = prompt(\"Hello! What is your name?\")\n\nconsole.log(`Welcome ${name}`)\n</code></pre>\n<p>Using variables, you could also store numbers:</p>\n<pre><code class=\"js language-js\">var age = 35\n</code></pre>\n<p>Lists of items:</p>\n<pre><code class=\"js language-js\">var friends = [\n    \"Savvas\",\n    \"Alice\",\n    \"Bob\"\n]\n</code></pre>\n<p>And many more types of data. How you declare variables will depend on the programming language you're using.</p>\n<p>This is how you declare a variable in Python:</p>\n<pre><code class=\"py language-py\">name = \"Savvas\"\n</code></pre>\n<p>Java:</p>\n<pre><code class=\"java language-java\">String name = \"Savvas\"\n</code></pre>\n<p><em>(notice that you need to specify what type of data your variable is storing. String basically means text)</em></p>\n<p>In conclusion, variables are the way for your program to store information that will be used later. Whether text, such as the name of your user, a number, such as the age of your user, a list of items, such as a list of names, and many other types of data.</p>\n<p>Thanks for reading!</p>",
        "series": "explained",
        "title": "Variables, explained.",
        "publishDate": "2021/09/06 09:00",
        "thumbnail": "variablesexplained.png",
        "description": "Programming basics - A simple explanation of one of the main building blocks of any program, variables.",
        "keywords": [
            "programming",
            "code",
            "variables",
            "explained",
            "basics"
        ],
        "twitterimage": "https://savvas.me/assets/variablesexplained-tw.png"
    },
    {
        "slug": "vue",
        "content": "<p>Vue is a Javascript framework that makes it really easy to create interactive user interfaces. It calls itself the <q cite=\"https://vuejs.org/\">The Progressive JavaScript Framework</q> and it's used by <a href=\"https://madewithvuejs.com/\">many organisations</a>, including Apple, Adobe and Google.</p>\n<p>So what is it?</p>\n<h2 id=\"letsexplain\">Let's explain</h2>\n<p>Let's suppose you're building a complex website. Let's say, a job search website.</p>\n<p>This website has lots of sections:</p>\n<ul>\n<li>The header with the website name</li>\n<li>The search bar</li>\n<li>The results page</li>\n<li>The footer</li>\n</ul>\n<p><img src=\"/assets/vuejs-careersearch.png\" alt=\"\" /></p>\n<p>All this will go on a single page which will get updated automatically, according to the user's choices in the search bar.</p>\n<p>You can already imagine how complex the html page will get if it's all on a single page.</p>\n<pre><code class=\"html language-html\">&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n    &lt;meta charset=\"UTF-8\"&gt;\n    &lt;meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\"&gt;\n    &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"&gt;\n    &lt;title&gt;Document&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;div id=\"app\"&gt;\n        &lt;header&gt;\n            &lt;h1&gt;CareerSearch&lt;/h1&gt;\n        &lt;/header&gt;\n\n        &lt;nav&gt;\n            &lt;form&gt;\n                &lt;label for=\"job-title\"&gt;Job Title&lt;/label&gt;\n                &lt;input type=\"text\" id=\"job-title\"/&gt;\n\n                &lt;label for=\"location\"&gt;Location&lt;/label&gt;\n                &lt;input type=\"text\" id=\"location\"/&gt;\n\n                &lt;label for=\"job-type\"&gt;Job type&lt;/label&gt;\n                &lt;select id=\"job-type\"&gt;\n                    &lt;option value=\"permanent\"&gt;Permanent&lt;/option&gt;\n                    &lt;option value=\"temporary\"&gt;Temporary&lt;/option&gt;\n                    &lt;option value=\"intern\"&gt;Intern&lt;/option&gt;\n                &lt;/select&gt;\n\n                &lt;button&gt;Search&lt;/button&gt;\n            &lt;/form&gt;\n        &lt;/nav&gt;\n\n        &lt;main&gt;\n            &lt;h2&gt;Search results&lt;/h2&gt;\n\n            &lt;ul&gt;\n                &lt;li&gt;\n                        &lt;h3&gt;&lt;a href=\"/1\"&gt;Software engineer&lt;/a&gt;&lt;/h3&gt;\n                        &lt;div&gt;Cardiff, UK&lt;/div&gt;\n                        &lt;div&gt;Permanent&lt;/div&gt;\n                    &lt;/a&gt;\n                &lt;/li&gt;\n            &lt;/ul&gt;\n        &lt;/main&gt;\n        &lt;footer&gt;\n            2021 (c) CareerSearch\n        &lt;/footer&gt;\n    &lt;/div&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\n<p>And this is for a relatively simple page, imagine how it'd look like for more complex interfaces. Maintaining this would be a nightmare.</p>\n<p>What this page need is some structure. Wouldn't it be nice if we could separate our HTML code into several pages? Something like:</p>\n<pre><code class=\"html language-html\">&lt;body&gt;\n    &lt;div id=\"app\"&gt;\n        &lt;Header /&gt;\n        &lt;Navigation /&gt;\n        &lt;Main /&gt;\n        &lt;Footer /&gt;\n    &lt;/div&gt;\n&lt;/body&gt;\n</code></pre>\n<p>Then each of these tags would have their own page. For example, the header would live on its own:</p>\n<pre><code class=\"html language-html\">&lt;header&gt;\n    &lt;h1&gt;CareerSearch&lt;/h1&gt;\n&lt;/header&gt;\n</code></pre>\n<p>Much cleaner and much easier to maintain right? Does it seem impossible?</p>\n<p>Not with Vue JS!</p>\n<h2 id=\"entervuejs\">Enter VueJS</h2>\n<p>VueJS has been built with components in mind, so that your web page is well-structured.</p>\n<p>Each component exists in its own <code>.vue</code> file, including an <code>App.vue</code> file which is your app's homepage:</p>\n<p><img src=\"/assets/vuejs-app.png\" alt=\"The file structure of a Vue app, including App.vue and a components directory with 4 .vue files: Header, Navigation, Main and Footer\" /></p>\n<p>And each file is basically some normal HTML you're used to writing. For example, the <code>Header</code> component looks like this:</p>\n<pre><code class=\"html language-html\">&lt;template&gt;\n    &lt;header&gt;\n        &lt;h1&gt;CareerSearch&lt;/h1&gt;\n    &lt;/header&gt;\n&lt;/template&gt;\n</code></pre>\n<p>Then with some very simple scripting, you can import these components into other components as needed. Simple and effective!</p>\n<p>Another awesome thing about VueJS is that you can create events and method with much less effort than vanilla Javascript. For example, updating the job list when you update anything from the search form.</p>\n<p>Basically VueJS is exactly what your HTML code is missing. Some much-needed structure. Like React but with the important difference that it's <em>much</em> easier to create components.</p>\n<p>Try VueJS. You'll thank me later.</p>\n<p>Thank you for reading.</p>\n<h2 id=\"getstarted\">Get started</h2>\n<p>This was an introduction to VueJS, not a get started guide. If you're convinced and want to try out VueJS, check this <a href=\"https://developer.mozilla.org/en-US/docs/Learn/Tools_and_testing/Client-side_JavaScript_frameworks/Vue_getting_started\">Getting Started</a> guide from MDN. Happy coding!</p>",
        "series": "explained",
        "title": "Vue, explained.",
        "description": "Vue is a progressive Javascript framework for building complex user interfaces. This is a simple explanation of what it is.",
        "thumbnail": "vue.png",
        "publishDate": "2021/06/16 13:17",
        "keywords": [
            "vue",
            "vuejs",
            "javascript",
            "ui",
            "interactive"
        ],
        "twitterimage": "https://savvas.me/assets/tw-vue.png"
    }
]

var idx = lunr(function () {
    this.ref('slug')
    this.field('title')
    this.field('keywords')
  
    allArticles
        .filter((article) => article.series === "explained")
        .forEach(function (doc) {
      this.add(doc)
    }, this)
  })

  function getSearchResults(query){
    let slugs = idx.search(query).map(result => result.ref)
    let results = slugs.map((slug) => allArticles.find((article) => article.slug === slug))
    return results
  }
